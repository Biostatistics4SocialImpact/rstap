/*
    rstap is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstap is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstap.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_stap_binomial_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_stap_binomial");
    reader.add_event(3, 3, "include", "/functions/common_functions.stan");
    reader.add_event(3, 0, "start", "/functions/common_functions.stan");
    reader.add_event(399, 396, "end", "/functions/common_functions.stan");
    reader.add_event(399, 4, "restart", "model_stap_binomial");
    reader.add_event(399, 4, "include", "/functions/binomial_likelihoods.stan");
    reader.add_event(399, 0, "start", "/functions/binomial_likelihoods.stan");
    reader.add_event(467, 68, "end", "/functions/binomial_likelihoods.stan");
    reader.add_event(467, 5, "restart", "model_stap_binomial");
    reader.add_event(470, 8, "include", "/data/NKZ.stan");
    reader.add_event(470, 0, "start", "/data/NKZ.stan");
    reader.add_event(495, 25, "end", "/data/NKZ.stan");
    reader.add_event(495, 9, "restart", "model_stap_binomial");
    reader.add_event(498, 12, "include", "/data/data_glm.stan");
    reader.add_event(498, 0, "start", "/data/data_glm.stan");
    reader.add_event(517, 19, "end", "/data/data_glm.stan");
    reader.add_event(517, 13, "restart", "model_stap_binomial");
    reader.add_event(518, 14, "include", "/data/weights_offset.stan");
    reader.add_event(518, 0, "start", "/data/weights_offset.stan");
    reader.add_event(526, 8, "end", "/data/weights_offset.stan");
    reader.add_event(526, 15, "restart", "model_stap_binomial");
    reader.add_event(528, 17, "include", "/data/hyperparameters.stan");
    reader.add_event(528, 0, "start", "/data/hyperparameters.stan");
    reader.add_event(551, 23, "end", "/data/hyperparameters.stan");
    reader.add_event(551, 18, "restart", "model_stap_binomial");
    reader.add_event(552, 19, "include", "/data/glmer_stuff.stan");
    reader.add_event(552, 0, "start", "/data/glmer_stuff.stan");
    reader.add_event(567, 15, "end", "/data/glmer_stuff.stan");
    reader.add_event(567, 20, "restart", "model_stap_binomial");
    reader.add_event(568, 21, "include", "/data/glmer_stuff2.stan");
    reader.add_event(568, 0, "start", "/data/glmer_stuff2.stan");
    reader.add_event(573, 5, "end", "/data/glmer_stuff2.stan");
    reader.add_event(573, 22, "restart", "model_stap_binomial");
    reader.add_event(577, 26, "include", "/tdata/tdata_glm.stan");
    reader.add_event(577, 0, "start", "/tdata/tdata_glm.stan");
    reader.add_event(599, 22, "end", "/tdata/tdata_glm.stan");
    reader.add_event(599, 27, "restart", "model_stap_binomial");
    reader.add_event(603, 31, "include", "/parameters/parameters_glm.stan");
    reader.add_event(603, 0, "start", "/parameters/parameters_glm.stan");
    reader.add_event(617, 14, "end", "/parameters/parameters_glm.stan");
    reader.add_event(617, 32, "restart", "model_stap_binomial");
    reader.add_event(620, 35, "include", "/tparameters/tparameters_glm.stan");
    reader.add_event(620, 0, "start", "/tparameters/tparameters_glm.stan");
    reader.add_event(697, 77, "end", "/tparameters/tparameters_glm.stan");
    reader.add_event(697, 36, "restart", "model_stap_binomial");
    reader.add_event(714, 53, "include", "/model/make_eta.stan");
    reader.add_event(714, 0, "start", "/model/make_eta.stan");
    reader.add_event(718, 4, "end", "/model/make_eta.stan");
    reader.add_event(718, 54, "restart", "model_stap_binomial");
    reader.add_event(719, 55, "include", "/model/eta_add_Wb.stan");
    reader.add_event(719, 0, "start", "/model/eta_add_Wb.stan");
    reader.add_event(721, 2, "end", "/model/eta_add_Wb.stan");
    reader.add_event(721, 56, "restart", "model_stap_binomial");
    reader.add_event(727, 62, "include", "/model/eta_no_intercept.stan");
    reader.add_event(727, 0, "start", "/model/eta_no_intercept.stan");
    reader.add_event(731, 4, "end", "/model/eta_no_intercept.stan");
    reader.add_event(731, 63, "restart", "model_stap_binomial");
    reader.add_event(739, 71, "include", "/model/priors_glm.stan");
    reader.add_event(739, 0, "start", "/model/priors_glm.stan");
    reader.add_event(804, 65, "end", "/model/priors_glm.stan");
    reader.add_event(804, 72, "restart", "model_stap_binomial");
    reader.add_event(816, 84, "include", "/model/make_eta.stan");
    reader.add_event(816, 0, "start", "/model/make_eta.stan");
    reader.add_event(820, 4, "end", "/model/make_eta.stan");
    reader.add_event(820, 85, "restart", "model_stap_binomial");
    reader.add_event(821, 86, "include", "/model/eta_add_Wb.stan");
    reader.add_event(821, 0, "start", "/model/eta_add_Wb.stan");
    reader.add_event(823, 2, "end", "/model/eta_add_Wb.stan");
    reader.add_event(823, 87, "restart", "model_stap_binomial");
    reader.add_event(833, 97, "include", "/model/eta_no_intercept.stan");
    reader.add_event(833, 0, "start", "/model/eta_no_intercept.stan");
    reader.add_event(837, 4, "end", "/model/eta_no_intercept.stan");
    reader.add_event(837, 98, "restart", "model_stap_binomial");
    reader.add_event(847, 106, "end", "model_stap_binomial");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
centerscale(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& M, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 12;
        validate_non_negative_index("out", "cols(M)", cols(M));
        validate_non_negative_index("out", "rows(M)", rows(M));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  out(static_cast<Eigen::VectorXd::Index>(cols(M)),static_cast<Eigen::VectorXd::Index>(rows(M)));
        (void) out;  // dummy to suppress unused var warning

        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out,DUMMY_VAR__);


        current_statement_begin__ = 13;
        for (int q = 1; q <= cols(M); ++q) {
            current_statement_begin__ = 14;
            stan::model::assign(out, 
                        stan::model::cons_list(stan::model::index_uni(q), stan::model::nil_index_list()), 
                        transpose(divide(subtract(stan::model::rvalue(M, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(q), stan::model::nil_index_list())), "M"),mean(stan::model::rvalue(M, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(q), stan::model::nil_index_list())), "M"))),sd(stan::model::rvalue(M, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(q), stan::model::nil_index_list())), "M")))), 
                        "assigning variable out");
        }
        current_statement_begin__ = 15;
        return stan::math::promote_scalar<fun_return_scalar_t__>(transpose(out));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct centerscale_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& M, std::ostream* pstream__) const {
        return centerscale(M, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
colmeans(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& M, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 22;
        validate_non_negative_index("ones", "rows(M)", rows(M));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ones(static_cast<Eigen::VectorXd::Index>(rows(M)));
        (void) ones;  // dummy to suppress unused var warning

        stan::math::initialize(ones, DUMMY_VAR__);
        stan::math::fill(ones,DUMMY_VAR__);
        stan::math::assign(ones,rep_vector(1.0,rows(M)));


        current_statement_begin__ = 23;
        return stan::math::promote_scalar<fun_return_scalar_t__>(divide(multiply(transpose(M),ones),rows(M)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct colmeans_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& M, std::ostream* pstream__) const {
        return colmeans(M, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
colsds(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& M, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 31;
        validate_non_negative_index("out", "cols(M)", cols(M));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  out(static_cast<Eigen::VectorXd::Index>(cols(M)));
        (void) out;  // dummy to suppress unused var warning

        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out,DUMMY_VAR__);


        current_statement_begin__ = 32;
        for (int col_ix = 1; col_ix <= cols(M); ++col_ix) {
            current_statement_begin__ = 33;
            stan::model::assign(out, 
                        stan::model::cons_list(stan::model::index_uni(col_ix), stan::model::nil_index_list()), 
                        sd(stan::model::rvalue(M, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(col_ix), stan::model::nil_index_list())), "M")), 
                        "assigning variable out");
        }
        current_statement_begin__ = 34;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct colsds_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& M, std::ostream* pstream__) const {
        return colsds(M, pstream__);
    }
};

template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic,1>
make_theta_L(const int& len_theta_L,
                 const std::vector<int>& p,
                 const T2__& dispersion,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& tau,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& scale,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& zeta,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& rho,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,1>& z_T, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 57;
        validate_non_negative_index("theta_L", "len_theta_L", len_theta_L);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  theta_L(static_cast<Eigen::VectorXd::Index>(len_theta_L));
        (void) theta_L;  // dummy to suppress unused var warning

        stan::math::initialize(theta_L, DUMMY_VAR__);
        stan::math::fill(theta_L,DUMMY_VAR__);
        current_statement_begin__ = 58;
        int zeta_mark(0);
        (void) zeta_mark;  // dummy to suppress unused var warning

        stan::math::fill(zeta_mark, std::numeric_limits<int>::min());
        stan::math::assign(zeta_mark,1);
        current_statement_begin__ = 59;
        int rho_mark(0);
        (void) rho_mark;  // dummy to suppress unused var warning

        stan::math::fill(rho_mark, std::numeric_limits<int>::min());
        stan::math::assign(rho_mark,1);
        current_statement_begin__ = 60;
        int z_T_mark(0);
        (void) z_T_mark;  // dummy to suppress unused var warning

        stan::math::fill(z_T_mark, std::numeric_limits<int>::min());
        stan::math::assign(z_T_mark,1);
        current_statement_begin__ = 61;
        int theta_L_mark(0);
        (void) theta_L_mark;  // dummy to suppress unused var warning

        stan::math::fill(theta_L_mark, std::numeric_limits<int>::min());
        stan::math::assign(theta_L_mark,1);


        current_statement_begin__ = 64;
        for (int i = 1; i <= size(p); ++i) {
            {
            current_statement_begin__ = 65;
            int nc(0);
            (void) nc;  // dummy to suppress unused var warning

            stan::math::fill(nc, std::numeric_limits<int>::min());
            stan::math::assign(nc,get_base1(p,i,"p",1));


            current_statement_begin__ = 66;
            if (as_bool(logical_eq(nc,1))) {

                current_statement_begin__ = 67;
                stan::model::assign(theta_L, 
                            stan::model::cons_list(stan::model::index_uni(theta_L_mark), stan::model::nil_index_list()), 
                            ((get_base1(tau,i,"tau",1) * get_base1(scale,i,"scale",1)) * dispersion), 
                            "assigning variable theta_L");
                current_statement_begin__ = 69;
                stan::math::assign(theta_L_mark, stan::model::deep_copy((theta_L_mark + 1)));
            } else {
                {
                current_statement_begin__ = 72;
                validate_non_negative_index("T_i", "nc", nc);
                validate_non_negative_index("T_i", "nc", nc);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(static_cast<Eigen::VectorXd::Index>(nc),static_cast<Eigen::VectorXd::Index>(nc));
                (void) T_i;  // dummy to suppress unused var warning

                stan::math::initialize(T_i, DUMMY_VAR__);
                stan::math::fill(T_i,DUMMY_VAR__);
                current_statement_begin__ = 73;
                local_scalar_t__ std_dev;
                (void) std_dev;  // dummy to suppress unused var warning

                stan::math::initialize(std_dev, DUMMY_VAR__);
                stan::math::fill(std_dev,DUMMY_VAR__);
                current_statement_begin__ = 74;
                local_scalar_t__ T21;
                (void) T21;  // dummy to suppress unused var warning

                stan::math::initialize(T21, DUMMY_VAR__);
                stan::math::fill(T21,DUMMY_VAR__);
                current_statement_begin__ = 75;
                local_scalar_t__ trace_T_i;
                (void) trace_T_i;  // dummy to suppress unused var warning

                stan::math::initialize(trace_T_i, DUMMY_VAR__);
                stan::math::fill(trace_T_i,DUMMY_VAR__);
                stan::math::assign(trace_T_i,(square(((get_base1(tau,i,"tau",1) * get_base1(scale,i,"scale",1)) * dispersion)) * nc));
                current_statement_begin__ = 76;
                validate_non_negative_index("pi", "nc", nc);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  pi(static_cast<Eigen::VectorXd::Index>(nc));
                (void) pi;  // dummy to suppress unused var warning

                stan::math::initialize(pi, DUMMY_VAR__);
                stan::math::fill(pi,DUMMY_VAR__);
                stan::math::assign(pi,segment(zeta,zeta_mark,nc));


                current_statement_begin__ = 77;
                stan::math::assign(pi, stan::model::deep_copy(divide(pi,sum(pi))));
                current_statement_begin__ = 80;
                stan::math::assign(zeta_mark, stan::model::deep_copy((zeta_mark + nc)));
                current_statement_begin__ = 81;
                stan::math::assign(std_dev, stan::math::sqrt((get_base1(pi,1,"pi",1) * trace_T_i)));
                current_statement_begin__ = 82;
                stan::model::assign(T_i, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            std_dev, 
                            "assigning variable T_i");
                current_statement_begin__ = 85;
                stan::math::assign(std_dev, stan::math::sqrt((get_base1(pi,2,"pi",1) * trace_T_i)));
                current_statement_begin__ = 86;
                stan::math::assign(T21, ((2.0 * get_base1(rho,rho_mark,"rho",1)) - 1.0));
                current_statement_begin__ = 87;
                stan::math::assign(rho_mark, stan::model::deep_copy((rho_mark + 1)));
                current_statement_begin__ = 88;
                stan::model::assign(T_i, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (std_dev * stan::math::sqrt((1.0 - square(T21)))), 
                            "assigning variable T_i");
                current_statement_begin__ = 89;
                stan::model::assign(T_i, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (std_dev * T21), 
                            "assigning variable T_i");
                current_statement_begin__ = 91;
                for (int r = 2; r <= (nc - 1); ++r) {
                    {
                    current_statement_begin__ = 92;
                    int rp1(0);
                    (void) rp1;  // dummy to suppress unused var warning

                    stan::math::fill(rp1, std::numeric_limits<int>::min());
                    stan::math::assign(rp1,(r + 1));
                    current_statement_begin__ = 93;
                    validate_non_negative_index("T_row", "r", r);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  T_row(static_cast<Eigen::VectorXd::Index>(r));
                    (void) T_row;  // dummy to suppress unused var warning

                    stan::math::initialize(T_row, DUMMY_VAR__);
                    stan::math::fill(T_row,DUMMY_VAR__);
                    stan::math::assign(T_row,segment(z_T,z_T_mark,r));
                    current_statement_begin__ = 94;
                    local_scalar_t__ scale_factor;
                    (void) scale_factor;  // dummy to suppress unused var warning

                    stan::math::initialize(scale_factor, DUMMY_VAR__);
                    stan::math::fill(scale_factor,DUMMY_VAR__);
                    stan::math::assign(scale_factor,(stan::math::sqrt((get_base1(rho,rho_mark,"rho",1) / dot_self(T_row))) * std_dev));


                    current_statement_begin__ = 95;
                    stan::math::assign(z_T_mark, stan::model::deep_copy((z_T_mark + r)));
                    current_statement_begin__ = 96;
                    stan::math::assign(std_dev, stan::math::sqrt((get_base1(pi,rp1,"pi",1) * trace_T_i)));
                    current_statement_begin__ = 97;
                    for (int c = 1; c <= r; ++c) {
                        current_statement_begin__ = 97;
                        stan::model::assign(T_i, 
                                    stan::model::cons_list(stan::model::index_uni(rp1), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    (get_base1(T_row,c,"T_row",1) * scale_factor), 
                                    "assigning variable T_i");
                    }
                    current_statement_begin__ = 98;
                    stan::model::assign(T_i, 
                                stan::model::cons_list(stan::model::index_uni(rp1), stan::model::cons_list(stan::model::index_uni(rp1), stan::model::nil_index_list())), 
                                (stan::math::sqrt((1.0 - get_base1(rho,rho_mark,"rho",1))) * std_dev), 
                                "assigning variable T_i");
                    current_statement_begin__ = 99;
                    stan::math::assign(rho_mark, stan::model::deep_copy((rho_mark + 1)));
                    }
                }
                current_statement_begin__ = 103;
                for (int c = 1; c <= nc; ++c) {
                    current_statement_begin__ = 103;
                    for (int r = c; r <= nc; ++r) {

                        current_statement_begin__ = 104;
                        stan::model::assign(theta_L, 
                                    stan::model::cons_list(stan::model::index_uni(theta_L_mark), stan::model::nil_index_list()), 
                                    get_base1(T_i,r,c,"T_i",1), 
                                    "assigning variable theta_L");
                        current_statement_begin__ = 105;
                        stan::math::assign(theta_L_mark, stan::model::deep_copy((theta_L_mark + 1)));
                    }
                }
                }
            }
            }
        }
        current_statement_begin__ = 109;
        return stan::math::promote_scalar<fun_return_scalar_t__>(theta_L);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_theta_L_functor__ {
    template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic,1>
    operator()(const int& len_theta_L,
                 const std::vector<int>& p,
                 const T2__& dispersion,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& tau,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& scale,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& zeta,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& rho,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,1>& z_T, std::ostream* pstream__) const {
        return make_theta_L(len_theta_L, p, dispersion, tau, scale, zeta, rho, z_T, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
make_b(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
           const std::vector<int>& p,
           const std::vector<int>& l, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 124;
        validate_non_negative_index("b", "rows(z_b)", rows(z_b));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b(static_cast<Eigen::VectorXd::Index>(rows(z_b)));
        (void) b;  // dummy to suppress unused var warning

        stan::math::initialize(b, DUMMY_VAR__);
        stan::math::fill(b,DUMMY_VAR__);
        current_statement_begin__ = 125;
        int b_mark(0);
        (void) b_mark;  // dummy to suppress unused var warning

        stan::math::fill(b_mark, std::numeric_limits<int>::min());
        stan::math::assign(b_mark,1);
        current_statement_begin__ = 126;
        int theta_L_mark(0);
        (void) theta_L_mark;  // dummy to suppress unused var warning

        stan::math::fill(theta_L_mark, std::numeric_limits<int>::min());
        stan::math::assign(theta_L_mark,1);


        current_statement_begin__ = 127;
        for (int i = 1; i <= size(p); ++i) {
            {
            current_statement_begin__ = 128;
            int nc(0);
            (void) nc;  // dummy to suppress unused var warning

            stan::math::fill(nc, std::numeric_limits<int>::min());
            stan::math::assign(nc,get_base1(p,i,"p",1));


            current_statement_begin__ = 129;
            if (as_bool(logical_eq(nc,1))) {
                {
                current_statement_begin__ = 130;
                local_scalar_t__ theta_L_start;
                (void) theta_L_start;  // dummy to suppress unused var warning

                stan::math::initialize(theta_L_start, DUMMY_VAR__);
                stan::math::fill(theta_L_start,DUMMY_VAR__);
                stan::math::assign(theta_L_start,get_base1(theta_L,theta_L_mark,"theta_L",1));


                current_statement_begin__ = 131;
                for (int s = b_mark; s <= ((b_mark + get_base1(l,i,"l",1)) - 1); ++s) {
                    current_statement_begin__ = 132;
                    stan::model::assign(b, 
                                stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                (theta_L_start * get_base1(z_b,s,"z_b",1)), 
                                "assigning variable b");
                }
                current_statement_begin__ = 133;
                stan::math::assign(b_mark, stan::model::deep_copy((b_mark + get_base1(l,i,"l",1))));
                current_statement_begin__ = 134;
                stan::math::assign(theta_L_mark, stan::model::deep_copy((theta_L_mark + 1)));
                }
            } else {
                {
                current_statement_begin__ = 137;
                validate_non_negative_index("T_i", "nc", nc);
                validate_non_negative_index("T_i", "nc", nc);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(static_cast<Eigen::VectorXd::Index>(nc),static_cast<Eigen::VectorXd::Index>(nc));
                (void) T_i;  // dummy to suppress unused var warning

                stan::math::initialize(T_i, DUMMY_VAR__);
                stan::math::fill(T_i,DUMMY_VAR__);
                stan::math::assign(T_i,rep_matrix(0,nc,nc));


                current_statement_begin__ = 138;
                for (int c = 1; c <= nc; ++c) {

                    current_statement_begin__ = 139;
                    stan::model::assign(T_i, 
                                stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                get_base1(theta_L,theta_L_mark,"theta_L",1), 
                                "assigning variable T_i");
                    current_statement_begin__ = 140;
                    stan::math::assign(theta_L_mark, stan::model::deep_copy((theta_L_mark + 1)));
                    current_statement_begin__ = 141;
                    for (int r = (c + 1); r <= nc; ++r) {

                        current_statement_begin__ = 142;
                        stan::model::assign(T_i, 
                                    stan::model::cons_list(stan::model::index_uni(r), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    get_base1(theta_L,theta_L_mark,"theta_L",1), 
                                    "assigning variable T_i");
                        current_statement_begin__ = 143;
                        stan::math::assign(theta_L_mark, stan::model::deep_copy((theta_L_mark + 1)));
                    }
                }
                current_statement_begin__ = 146;
                for (int j = 1; j <= get_base1(l,i,"l",1); ++j) {
                    {
                    current_statement_begin__ = 147;
                    validate_non_negative_index("temp", "nc", nc);
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  temp(static_cast<Eigen::VectorXd::Index>(nc));
                    (void) temp;  // dummy to suppress unused var warning

                    stan::math::initialize(temp, DUMMY_VAR__);
                    stan::math::fill(temp,DUMMY_VAR__);
                    stan::math::assign(temp,multiply(T_i,segment(z_b,b_mark,nc)));


                    current_statement_begin__ = 148;
                    stan::math::assign(b_mark, stan::model::deep_copy((b_mark - 1)));
                    current_statement_begin__ = 149;
                    for (int s = 1; s <= nc; ++s) {
                        current_statement_begin__ = 149;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni((b_mark + s)), stan::model::nil_index_list()), 
                                    get_base1(temp,s,"temp",1), 
                                    "assigning variable b");
                    }
                    current_statement_begin__ = 150;
                    stan::math::assign(b_mark, stan::model::deep_copy(((b_mark + nc) + 1)));
                    }
                }
                }
            }
            }
        }
        current_statement_begin__ = 154;
        return stan::math::promote_scalar<fun_return_scalar_t__>(b);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_b_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
           const std::vector<int>& p,
           const std::vector<int>& l, std::ostream* pstream__) const {
        return make_b(z_b, theta_L, p, l, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
void
decov_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& shape,
             const int& t,
             const std::vector<int>& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, T_lp__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 175;
        int pos_reg(0);
        (void) pos_reg;  // dummy to suppress unused var warning

        stan::math::fill(pos_reg, std::numeric_limits<int>::min());
        stan::math::assign(pos_reg,1);
        current_statement_begin__ = 176;
        int pos_rho(0);
        (void) pos_rho;  // dummy to suppress unused var warning

        stan::math::fill(pos_rho, std::numeric_limits<int>::min());
        stan::math::assign(pos_rho,1);


        current_statement_begin__ = 177;
        lp_accum__.add(normal_log(z_b,0,1));
        current_statement_begin__ = 178;
        lp_accum__.add(normal_log(z_T,0,1));
        current_statement_begin__ = 179;
        for (int i = 1; i <= t; ++i) {
            current_statement_begin__ = 179;
            if (as_bool(logical_gt(get_base1(p,i,"p",1),1))) {
                {
                current_statement_begin__ = 180;
                validate_non_negative_index("shape1", "(get_base1(p,i,\"p\",1) - 1)", (get_base1(p,i,"p",1) - 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  shape1(static_cast<Eigen::VectorXd::Index>((get_base1(p,i,"p",1) - 1)));
                (void) shape1;  // dummy to suppress unused var warning

                stan::math::initialize(shape1, DUMMY_VAR__);
                stan::math::fill(shape1,DUMMY_VAR__);
                current_statement_begin__ = 181;
                validate_non_negative_index("shape2", "(get_base1(p,i,\"p\",1) - 1)", (get_base1(p,i,"p",1) - 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  shape2(static_cast<Eigen::VectorXd::Index>((get_base1(p,i,"p",1) - 1)));
                (void) shape2;  // dummy to suppress unused var warning

                stan::math::initialize(shape2, DUMMY_VAR__);
                stan::math::fill(shape2,DUMMY_VAR__);
                current_statement_begin__ = 182;
                local_scalar_t__ nu;
                (void) nu;  // dummy to suppress unused var warning

                stan::math::initialize(nu, DUMMY_VAR__);
                stan::math::fill(nu,DUMMY_VAR__);
                stan::math::assign(nu,(get_base1(regularization,pos_reg,"regularization",1) + (0.5 * (get_base1(p,i,"p",1) - 2))));


                current_statement_begin__ = 183;
                stan::math::assign(pos_reg, stan::model::deep_copy((pos_reg + 1)));
                current_statement_begin__ = 184;
                stan::model::assign(shape1, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            nu, 
                            "assigning variable shape1");
                current_statement_begin__ = 185;
                stan::model::assign(shape2, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            nu, 
                            "assigning variable shape2");
                current_statement_begin__ = 186;
                for (int j = 2; j <= (get_base1(p,i,"p",1) - 1); ++j) {

                    current_statement_begin__ = 187;
                    stan::math::assign(nu, stan::model::deep_copy((nu - 0.5)));
                    current_statement_begin__ = 188;
                    stan::model::assign(shape1, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                (0.5 * j), 
                                "assigning variable shape1");
                    current_statement_begin__ = 189;
                    stan::model::assign(shape2, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                nu, 
                                "assigning variable shape2");
                }
                current_statement_begin__ = 191;
                lp_accum__.add(beta_log(stan::model::rvalue(rho, stan::model::cons_list(stan::model::index_min_max(pos_rho, ((pos_rho + get_base1(p,i,"p",1)) - 2)), stan::model::nil_index_list()), "rho"),shape1,shape2));
                current_statement_begin__ = 192;
                stan::math::assign(pos_rho, stan::model::deep_copy(((pos_rho + get_base1(p,i,"p",1)) - 1)));
                }
            }
        }
        current_statement_begin__ = 194;
        lp_accum__.add(gamma_log(zeta,delta,1));
        current_statement_begin__ = 195;
        lp_accum__.add(gamma_log(tau,shape,1));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct decov_lp_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
        void
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& shape,
             const int& t,
             const std::vector<int>& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return decov_lp(z_b, z_T, rho, zeta, tau, regularization, delta, shape, t, p, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
hs_prior(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
             const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local,
             const T3__& global_prior_scale,
             const T4__& error_scale,
             const T5__& c2, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 212;
        int K(0);
        (void) K;  // dummy to suppress unused var warning

        stan::math::fill(K, std::numeric_limits<int>::min());
        stan::math::assign(K,rows(z_beta));
        current_statement_begin__ = 213;
        validate_non_negative_index("lambda", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda;  // dummy to suppress unused var warning

        stan::math::initialize(lambda, DUMMY_VAR__);
        stan::math::fill(lambda,DUMMY_VAR__);
        stan::math::assign(lambda,elt_multiply(get_base1(local,1,"local",1),stan::math::sqrt(get_base1(local,2,"local",1))));
        current_statement_begin__ = 214;
        local_scalar_t__ tau;
        (void) tau;  // dummy to suppress unused var warning

        stan::math::initialize(tau, DUMMY_VAR__);
        stan::math::fill(tau,DUMMY_VAR__);
        stan::math::assign(tau,(((get_base1(global,1,"global",1) * stan::math::sqrt(get_base1(global,2,"global",1))) * global_prior_scale) * error_scale));
        current_statement_begin__ = 215;
        validate_non_negative_index("lambda2", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda2(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda2;  // dummy to suppress unused var warning

        stan::math::initialize(lambda2, DUMMY_VAR__);
        stan::math::fill(lambda2,DUMMY_VAR__);
        stan::math::assign(lambda2,square(lambda));
        current_statement_begin__ = 216;
        validate_non_negative_index("lambda_tilde", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda_tilde(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda_tilde;  // dummy to suppress unused var warning

        stan::math::initialize(lambda_tilde, DUMMY_VAR__);
        stan::math::fill(lambda_tilde,DUMMY_VAR__);
        stan::math::assign(lambda_tilde,stan::math::sqrt(elt_divide(multiply(c2,lambda2),add(c2,multiply(square(tau),lambda2)))));


        current_statement_begin__ = 217;
        return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(elt_multiply(z_beta,lambda_tilde),tau));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct hs_prior_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
             const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local,
             const T3__& global_prior_scale,
             const T4__& error_scale,
             const T5__& c2, std::ostream* pstream__) const {
        return hs_prior(z_beta, global, local, global_prior_scale, error_scale, c2, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
hsplus_prior(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
                 const std::vector<T1__>& global,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local,
                 const T3__& global_prior_scale,
                 const T4__& error_scale,
                 const T5__& c2, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 233;
        int K(0);
        (void) K;  // dummy to suppress unused var warning

        stan::math::fill(K, std::numeric_limits<int>::min());
        stan::math::assign(K,rows(z_beta));
        current_statement_begin__ = 234;
        validate_non_negative_index("lambda", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda;  // dummy to suppress unused var warning

        stan::math::initialize(lambda, DUMMY_VAR__);
        stan::math::fill(lambda,DUMMY_VAR__);
        stan::math::assign(lambda,elt_multiply(get_base1(local,1,"local",1),stan::math::sqrt(get_base1(local,2,"local",1))));
        current_statement_begin__ = 235;
        validate_non_negative_index("eta", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  eta(static_cast<Eigen::VectorXd::Index>(K));
        (void) eta;  // dummy to suppress unused var warning

        stan::math::initialize(eta, DUMMY_VAR__);
        stan::math::fill(eta,DUMMY_VAR__);
        stan::math::assign(eta,elt_multiply(get_base1(local,3,"local",1),stan::math::sqrt(get_base1(local,4,"local",1))));
        current_statement_begin__ = 236;
        local_scalar_t__ tau;
        (void) tau;  // dummy to suppress unused var warning

        stan::math::initialize(tau, DUMMY_VAR__);
        stan::math::fill(tau,DUMMY_VAR__);
        stan::math::assign(tau,(((get_base1(global,1,"global",1) * stan::math::sqrt(get_base1(global,2,"global",1))) * global_prior_scale) * error_scale));
        current_statement_begin__ = 237;
        validate_non_negative_index("lambda_eta2", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda_eta2(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda_eta2;  // dummy to suppress unused var warning

        stan::math::initialize(lambda_eta2, DUMMY_VAR__);
        stan::math::fill(lambda_eta2,DUMMY_VAR__);
        stan::math::assign(lambda_eta2,square(elt_multiply(lambda,eta)));
        current_statement_begin__ = 238;
        validate_non_negative_index("lambda_tilde", "K", K);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda_tilde(static_cast<Eigen::VectorXd::Index>(K));
        (void) lambda_tilde;  // dummy to suppress unused var warning

        stan::math::initialize(lambda_tilde, DUMMY_VAR__);
        stan::math::fill(lambda_tilde,DUMMY_VAR__);
        stan::math::assign(lambda_tilde,stan::math::sqrt(elt_divide(multiply(c2,lambda_eta2),add(c2,multiply(square(tau),lambda_eta2)))));


        current_statement_begin__ = 240;
        return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(elt_multiply(z_beta,lambda_tilde),tau));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct hsplus_prior_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
                 const std::vector<T1__>& global,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local,
                 const T3__& global_prior_scale,
                 const T4__& error_scale,
                 const T5__& c2, std::ostream* pstream__) const {
        return hsplus_prior(z_beta, global, local, global_prior_scale, error_scale, c2, pstream__);
    }
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
CFt(const T0__& z,
        const T1__& df, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 254;
        local_scalar_t__ z2;
        (void) z2;  // dummy to suppress unused var warning

        stan::math::initialize(z2, DUMMY_VAR__);
        stan::math::fill(z2,DUMMY_VAR__);
        stan::math::assign(z2,square(z));
        current_statement_begin__ = 255;
        local_scalar_t__ z3;
        (void) z3;  // dummy to suppress unused var warning

        stan::math::initialize(z3, DUMMY_VAR__);
        stan::math::fill(z3,DUMMY_VAR__);
        stan::math::assign(z3,(z2 * z));
        current_statement_begin__ = 256;
        local_scalar_t__ z5;
        (void) z5;  // dummy to suppress unused var warning

        stan::math::initialize(z5, DUMMY_VAR__);
        stan::math::fill(z5,DUMMY_VAR__);
        stan::math::assign(z5,(z2 * z3));
        current_statement_begin__ = 257;
        local_scalar_t__ z7;
        (void) z7;  // dummy to suppress unused var warning

        stan::math::initialize(z7, DUMMY_VAR__);
        stan::math::fill(z7,DUMMY_VAR__);
        stan::math::assign(z7,(z2 * z5));
        current_statement_begin__ = 258;
        local_scalar_t__ z9;
        (void) z9;  // dummy to suppress unused var warning

        stan::math::initialize(z9, DUMMY_VAR__);
        stan::math::fill(z9,DUMMY_VAR__);
        stan::math::assign(z9,(z2 * z7));
        current_statement_begin__ = 259;
        local_scalar_t__ df2;
        (void) df2;  // dummy to suppress unused var warning

        stan::math::initialize(df2, DUMMY_VAR__);
        stan::math::fill(df2,DUMMY_VAR__);
        stan::math::assign(df2,square(df));
        current_statement_begin__ = 260;
        local_scalar_t__ df3;
        (void) df3;  // dummy to suppress unused var warning

        stan::math::initialize(df3, DUMMY_VAR__);
        stan::math::fill(df3,DUMMY_VAR__);
        stan::math::assign(df3,(df2 * df));
        current_statement_begin__ = 261;
        local_scalar_t__ df4;
        (void) df4;  // dummy to suppress unused var warning

        stan::math::initialize(df4, DUMMY_VAR__);
        stan::math::fill(df4,DUMMY_VAR__);
        stan::math::assign(df4,(df2 * df2));


        current_statement_begin__ = 262;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((((z + ((z3 + z) / (4 * df))) + ((((5 * z5) + (16 * z3)) + (3 * z)) / (96 * df2))) + (((((3 * z7) + (19 * z5)) + (17 * z3)) - (15 * z)) / (384 * df3))) + ((((((79 * z9) + (776 * z7)) + (1482 * z5)) - (1920 * z3)) - (945 * z)) / (92160 * df4))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct CFt_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& z,
        const T1__& df, std::ostream* pstream__) const {
        return CFt(z, df, pstream__);
    }
};

std::vector<std::vector<int> >
make_V(const int& N,
           const int& t,
           const std::vector<int>& v, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 276;
        validate_non_negative_index("V", "t", t);
        validate_non_negative_index("V", "N", N);
        vector<vector<int> > V(t, (vector<int>(N, 0)));
        stan::math::fill(V, std::numeric_limits<int>::min());
        current_statement_begin__ = 277;
        int pos(0);
        (void) pos;  // dummy to suppress unused var warning

        stan::math::fill(pos, std::numeric_limits<int>::min());
        stan::math::assign(pos,1);


        current_statement_begin__ = 278;
        if (as_bool(logical_gt(t,0))) {
            current_statement_begin__ = 278;
            for (int j = 1; j <= N; ++j) {
                current_statement_begin__ = 278;
                for (int i = 1; i <= t; ++i) {

                    current_statement_begin__ = 279;
                    stan::model::assign(V, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(v,pos,"v",1), 
                                "assigning variable V");
                    current_statement_begin__ = 280;
                    stan::math::assign(pos, stan::model::deep_copy((pos + 1)));
                }
            }
        }
        current_statement_begin__ = 282;
        return stan::math::promote_scalar<fun_return_scalar_t__>(V);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_V_functor__ {
            std::vector<std::vector<int> >
    operator()(const int& N,
           const int& t,
           const std::vector<int>& v, std::ostream* pstream__) const {
        return make_V(N, t, v, pstream__);
    }
};

double
make_lower(const int& family,
               const int& link, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 301;
        if (as_bool(logical_eq(family,1))) {
            current_statement_begin__ = 301;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::negative_infinity());
        }
        current_statement_begin__ = 302;
        if (as_bool(logical_lte(family,3))) {

            current_statement_begin__ = 303;
            if (as_bool(logical_eq(link,2))) {
                current_statement_begin__ = 303;
                return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::negative_infinity());
            }
            current_statement_begin__ = 304;
            return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        }
        current_statement_begin__ = 306;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::negative_infinity());
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_lower_functor__ {
            double
    operator()(const int& family,
               const int& link, std::ostream* pstream__) const {
        return make_lower(family, link, pstream__);
    }
};

double
make_upper(const int& family,
               const int& link, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 317;
        if (as_bool((primitive_value(logical_eq(family,4)) && primitive_value(logical_eq(link,5))))) {
            current_statement_begin__ = 317;
            return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        }
        current_statement_begin__ = 318;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::positive_infinity());
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_upper_functor__ {
            double
    operator()(const int& family,
               const int& link, std::ostream* pstream__) const {
        return make_upper(family, link, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
expo_vec(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& in,
             const T1__& to_pow, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 329;
        validate_non_negative_index("out", "rows(in)", rows(in));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  out(static_cast<Eigen::VectorXd::Index>(rows(in)));
        (void) out;  // dummy to suppress unused var warning

        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out,DUMMY_VAR__);


        current_statement_begin__ = 330;
        for (int i = 1; i <= rows(in); ++i) {
            current_statement_begin__ = 331;
            stan::model::assign(out, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        pow(get_base1(in,i,"in",1),to_pow), 
                        "assigning variable out");
        }
        current_statement_begin__ = 332;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct expo_vec_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& in,
             const T1__& to_pow, std::ostream* pstream__) const {
        return expo_vec(in, to_pow, pstream__);
    }
};

template <typename T0__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic,1>
get_weights(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& exposure,
                const int& w,
                const T2__& theta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 343;
        if (as_bool(logical_eq(w,1))) {
            current_statement_begin__ = 344;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::erf(exposure));
        } else if (as_bool(logical_eq(w,2))) {
            current_statement_begin__ = 346;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::erfc(exposure));
        } else if (as_bool(logical_eq(w,3))) {
            current_statement_begin__ = 348;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(minus(exposure)));
        } else if (as_bool(logical_eq(w,4))) {
            current_statement_begin__ = 350;
            return stan::math::promote_scalar<fun_return_scalar_t__>(subtract(1,stan::math::exp(minus(exposure))));
        } else if (as_bool(logical_eq(w,5))) {
            current_statement_begin__ = 352;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(minus(expo_vec(exposure,theta, pstream__))));
        } else {
            current_statement_begin__ = 354;
            return stan::math::promote_scalar<fun_return_scalar_t__>(subtract(1,stan::math::exp(minus(expo_vec(exposure,theta, pstream__)))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct get_weights_functor__ {
    template <typename T0__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& exposure,
                const int& w,
                const T2__& theta, std::ostream* pstream__) const {
        return get_weights(exposure, w, theta, pstream__);
    }
};

template <typename T3__, typename T4__>
typename boost::math::tools::promote_args<T3__, T4__>::type
assign_exposure(const int& log_switch,
                    const int& w,
                    const std::vector<std::vector<int> >& u,
                    const Eigen::Matrix<T3__, Eigen::Dynamic,1>& time_dists,
                    const T4__& theta,
                    const int& q,
                    const int& n, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 368;
        local_scalar_t__ out;
        (void) out;  // dummy to suppress unused var warning

        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out,DUMMY_VAR__);


        current_statement_begin__ = 369;
        if (as_bool(logical_gt(get_base1(get_base1(u,n,"u",1),((q * 2) - 1),"u",2),get_base1(get_base1(u,n,"u",1),(q * 2),"u",2)))) {
            current_statement_begin__ = 370;
            return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        } else {
            current_statement_begin__ = 372;
            stan::math::assign(out, sum(get_weights(multiply(stan::model::rvalue(time_dists, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(u,n,"u",1),((q * 2) - 1),"u",2), get_base1(get_base1(u,n,"u",1),(q * 2),"u",2)), stan::model::nil_index_list()), "time_dists"),inv(theta)),w,theta, pstream__)));
        }
        current_statement_begin__ = 373;
        if (as_bool(logical_eq(log_switch,1))) {
            current_statement_begin__ = 374;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::log(out));
        } else {
            current_statement_begin__ = 376;
            return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct assign_exposure_functor__ {
    template <typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T3__, T4__>::type
    operator()(const int& log_switch,
                    const int& w,
                    const std::vector<std::vector<int> >& u,
                    const Eigen::Matrix<T3__, Eigen::Dynamic,1>& time_dists,
                    const T4__& theta,
                    const int& q,
                    const int& n, std::ostream* pstream__) const {
        return assign_exposure(log_switch, w, u, time_dists, theta, q, n, pstream__);
    }
};

template <typename T5__, typename T6__, typename T7__, typename T8__>
typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type
assign_st_exposure(const int& log_switch,
                       const int& w_s,
                       const int& w_t,
                       const std::vector<std::vector<int> >& u_s,
                       const std::vector<std::vector<int> >& u_t,
                       const Eigen::Matrix<T5__, Eigen::Dynamic,1>& dists,
                       const Eigen::Matrix<T6__, Eigen::Dynamic,1>& time,
                       const T7__& theta_s,
                       const T8__& theta_t,
                       const int& q,
                       const int& n, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 389;
        local_scalar_t__ out;
        (void) out;  // dummy to suppress unused var warning

        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out,DUMMY_VAR__);


        current_statement_begin__ = 390;
        if (as_bool(logical_gt(get_base1(get_base1(u_s,n,"u_s",1),((q * 2) - 1),"u_s",2),get_base1(get_base1(u_s,n,"u_s",1),(q * 2),"u_s",2)))) {
            current_statement_begin__ = 391;
            return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        } else {
            current_statement_begin__ = 393;
            stan::math::assign(out, sum(elt_multiply(get_weights(multiply(stan::model::rvalue(dists, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(u_s,n,"u_s",1),((q * 2) - 1),"u_s",2), get_base1(get_base1(u_s,n,"u_s",1),(q * 2),"u_s",2)), stan::model::nil_index_list()), "dists"),inv(theta_s)),w_s,theta_s, pstream__),get_weights(multiply(stan::model::rvalue(time, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(u_t,n,"u_t",1),((q * 2) - 1),"u_t",2), get_base1(get_base1(u_t,n,"u_t",1),(q * 2),"u_t",2)), stan::model::nil_index_list()), "time"),inv(theta_t)),w_t,theta_t, pstream__))));
        }
        current_statement_begin__ = 395;
        if (as_bool(logical_eq(log_switch,1))) {
            current_statement_begin__ = 396;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::log(out));
        } else {
            current_statement_begin__ = 398;
            return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct assign_st_exposure_functor__ {
    template <typename T5__, typename T6__, typename T7__, typename T8__>
        typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type
    operator()(const int& log_switch,
                       const int& w_s,
                       const int& w_t,
                       const std::vector<std::vector<int> >& u_s,
                       const std::vector<std::vector<int> >& u_t,
                       const Eigen::Matrix<T5__, Eigen::Dynamic,1>& dists,
                       const Eigen::Matrix<T6__, Eigen::Dynamic,1>& time,
                       const T7__& theta_s,
                       const T8__& theta_t,
                       const int& q,
                       const int& n, std::ostream* pstream__) const {
        return assign_st_exposure(log_switch, w_s, w_t, u_s, u_t, dists, time, theta_s, theta_t, q, n, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_binom(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 408;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 408;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_logit(eta));
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 409;
            return stan::math::promote_scalar<fun_return_scalar_t__>(Phi(eta));
        } else if (as_bool(logical_eq(link,3))) {
            current_statement_begin__ = 410;
            return stan::math::promote_scalar<fun_return_scalar_t__>(add(divide(stan::math::atan(eta),stan::math::pi()),0.5));
        } else if (as_bool(logical_eq(link,4))) {
            current_statement_begin__ = 411;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(link,5))) {
            current_statement_begin__ = 412;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_cloglog(eta));
        } else {
            current_statement_begin__ = 413;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 414;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_binom_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) const {
        return linkinv_binom(eta, link, pstream__);
    }
};

template <typename T2__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T2__, T_lp__>::type
ll_binom_lp(const std::vector<int>& y,
                const std::vector<int>& trials,
                const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
                const int& link, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 426;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 426;
            lp_accum__.add(binomial_logit_log(y,trials,eta));
        } else if (as_bool(logical_lt(link,4))) {
            current_statement_begin__ = 427;
            lp_accum__.add(binomial_log(y,trials,linkinv_binom(eta,link, pstream__)));
        } else if (as_bool(logical_eq(link,4))) {

            current_statement_begin__ = 429;
            for (int n = 1; n <= num_elements(y); ++n) {

                current_statement_begin__ = 430;
                lp_accum__.add((get_base1(y,n,"y",1) * get_base1(eta,n,"eta",1)));
                current_statement_begin__ = 431;
                lp_accum__.add(((get_base1(trials,n,"trials",1) - get_base1(y,n,"y",1)) * log1m_exp(get_base1(eta,n,"eta",1))));
                current_statement_begin__ = 432;
                lp_accum__.add(binomial_coefficient_log(get_base1(trials,n,"trials",1),get_base1(y,n,"y",1)));
            }
        } else if (as_bool(logical_eq(link,5))) {

            current_statement_begin__ = 436;
            for (int n = 1; n <= num_elements(y); ++n) {
                {
                current_statement_begin__ = 437;
                local_scalar_t__ neg_exp_eta;
                (void) neg_exp_eta;  // dummy to suppress unused var warning

                stan::math::initialize(neg_exp_eta, DUMMY_VAR__);
                stan::math::fill(neg_exp_eta,DUMMY_VAR__);
                stan::math::assign(neg_exp_eta,-(stan::math::exp(get_base1(eta,n,"eta",1))));


                current_statement_begin__ = 438;
                lp_accum__.add((get_base1(y,n,"y",1) * log1m_exp(neg_exp_eta)));
                current_statement_begin__ = 439;
                lp_accum__.add(((get_base1(trials,n,"trials",1) - get_base1(y,n,"y",1)) * neg_exp_eta));
                current_statement_begin__ = 440;
                lp_accum__.add(binomial_coefficient_log(get_base1(trials,n,"trials",1),get_base1(y,n,"y",1)));
                }
            }
        } else {
            current_statement_begin__ = 443;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 444;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ll_binom_lp_functor__ {
    template <typename T2__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T2__, T_lp__>::type
    operator()(const std::vector<int>& y,
                const std::vector<int>& trials,
                const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
                const int& link, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return ll_binom_lp(y, trials, eta, link, lp__, lp_accum__, pstream__);
    }
};

template <typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T2__>::type, Eigen::Dynamic,1>
pw_binom(const std::vector<int>& y,
             const std::vector<int>& trials,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
             const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 455;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(eta));
        current_statement_begin__ = 456;
        validate_non_negative_index("ll", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(N));
        (void) ll;  // dummy to suppress unused var warning

        stan::math::initialize(ll, DUMMY_VAR__);
        stan::math::fill(ll,DUMMY_VAR__);


        current_statement_begin__ = 457;
        if (as_bool(logical_eq(link,1))) {

            current_statement_begin__ = 458;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 459;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            binomial_logit_log(get_base1(y,n,"y",1),get_base1(trials,n,"trials",1),get_base1(eta,n,"eta",1)), 
                            "assigning variable ll");
            }
        } else if (as_bool(logical_lte(link,5))) {
            {
            current_statement_begin__ = 462;
            validate_non_negative_index("pi", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  pi(static_cast<Eigen::VectorXd::Index>(N));
            (void) pi;  // dummy to suppress unused var warning

            stan::math::initialize(pi, DUMMY_VAR__);
            stan::math::fill(pi,DUMMY_VAR__);
            stan::math::assign(pi,linkinv_binom(eta,link, pstream__));


            current_statement_begin__ = 463;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 463;
                stan::model::assign(ll, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            binomial_log(get_base1(y,n,"y",1),get_base1(trials,n,"trials",1),get_base1(pi,n,"pi",1)), 
                            "assigning variable ll");
            }
            }
        } else {
            current_statement_begin__ = 465;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 466;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_binom_functor__ {
    template <typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T2__>::type, Eigen::Dynamic,1>
    operator()(const std::vector<int>& y,
             const std::vector<int>& trials,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& eta,
             const int& link, std::ostream* pstream__) const {
        return pw_binom(y, trials, eta, link, pstream__);
    }
};

#include <meta_header.hpp>
 class model_stap_binomial : public prob_grad {
private:
    int N;
    int K;
    int Q;
    vector<int> log_ar;
    vector<int> stap_code;
    int Q_t;
    int Q_s;
    int Q_st;
    int M;
    vector_d zbar;
    matrix_d Z;
    vector<vector_d> dists_crs;
    vector<vector_d> times_crs;
    vector<vector<int> > weight_mat;
    vector<vector<int> > u_s;
    vector<vector<int> > u_t;
    double max_distance;
    double max_time;
    vector<int> y;
    vector<int> trials;
    int has_intercept;
    int link;
    int prior_dist;
    int prior_dist_for_stap;
    int prior_dist_for_intercept;
    int prior_dist_for_aux;
    vector<int> prior_dist_for_theta_s;
    vector<int> prior_dist_for_theta_t;
    int has_weights;
    vector_d weights;
    int has_offset;
    vector_d offset;
    int family;
    vector_d prior_scale;
    vector_d prior_scale_for_stap;
    vector_d prior_scale_for_theta_s;
    vector_d prior_scale_for_theta_t;
    double prior_scale_for_intercept;
    double prior_scale_for_aux;
    vector_d prior_mean;
    vector_d prior_mean_for_stap;
    vector_d prior_mean_for_theta_s;
    vector_d prior_mean_for_theta_t;
    double prior_mean_for_intercept;
    double prior_mean_for_aux;
    vector_d prior_df;
    double prior_df_for_intercept;
    double prior_df_for_aux;
    vector_d prior_df_for_theta_s;
    vector_d prior_df_for_theta_t;
    vector_d prior_df_for_stap;
    vector<int> num_normals;
    vector<int> num_normals_for_stap;
    int t;
    vector<int> p;
    vector<int> l;
    int q;
    int len_theta_L;
    vector_d shape;
    vector_d scale;
    int len_concentration;
    vector<double> concentration;
    int len_regularization;
    vector<double> regularization;
    int num_non_zero;
    vector_d w;
    vector<int> v;
    vector<int> u;
    int special_case;
    double aux;
    vector<vector<int> > V;
    int len_z_T;
    int len_var_group;
    int len_rho;
    int is_continuous;
    int pos;
    vector<double> del;
    int hs;
public:
    model_stap_binomial(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_stap_binomial(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_stap_binomial_namespace::model_stap_binomial";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 473;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 474;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 475;
            context__.validate_dims("data initialization", "Q", "int", context__.to_vec());
            Q = int(0);
            vals_i__ = context__.vals_i("Q");
            pos__ = 0;
            Q = vals_i__[pos__++];
            current_statement_begin__ = 476;
            validate_non_negative_index("log_ar", "Q", Q);
            context__.validate_dims("data initialization", "log_ar", "int", context__.to_vec(Q));
            validate_non_negative_index("log_ar", "Q", Q);
            log_ar = std::vector<int>(Q,int(0));
            vals_i__ = context__.vals_i("log_ar");
            pos__ = 0;
            size_t log_ar_limit_0__ = Q;
            for (size_t i_0__ = 0; i_0__ < log_ar_limit_0__; ++i_0__) {
                log_ar[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 477;
            validate_non_negative_index("stap_code", "Q", Q);
            context__.validate_dims("data initialization", "stap_code", "int", context__.to_vec(Q));
            validate_non_negative_index("stap_code", "Q", Q);
            stap_code = std::vector<int>(Q,int(0));
            vals_i__ = context__.vals_i("stap_code");
            pos__ = 0;
            size_t stap_code_limit_0__ = Q;
            for (size_t i_0__ = 0; i_0__ < stap_code_limit_0__; ++i_0__) {
                stap_code[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 478;
            context__.validate_dims("data initialization", "Q_t", "int", context__.to_vec());
            Q_t = int(0);
            vals_i__ = context__.vals_i("Q_t");
            pos__ = 0;
            Q_t = vals_i__[pos__++];
            current_statement_begin__ = 479;
            context__.validate_dims("data initialization", "Q_s", "int", context__.to_vec());
            Q_s = int(0);
            vals_i__ = context__.vals_i("Q_s");
            pos__ = 0;
            Q_s = vals_i__[pos__++];
            current_statement_begin__ = 480;
            context__.validate_dims("data initialization", "Q_st", "int", context__.to_vec());
            Q_st = int(0);
            vals_i__ = context__.vals_i("Q_st");
            pos__ = 0;
            Q_st = vals_i__[pos__++];
            current_statement_begin__ = 481;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            current_statement_begin__ = 484;
            validate_non_negative_index("zbar", "K", K);
            context__.validate_dims("data initialization", "zbar", "vector_d", context__.to_vec(K));
            validate_non_negative_index("zbar", "K", K);
            zbar = vector_d(static_cast<Eigen::VectorXd::Index>(K));
            vals_r__ = context__.vals_r("zbar");
            pos__ = 0;
            size_t zbar_i_vec_lim__ = K;
            for (size_t i_vec__ = 0; i_vec__ < zbar_i_vec_lim__; ++i_vec__) {
                zbar[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 485;
            validate_non_negative_index("Z", "N", N);
            validate_non_negative_index("Z", "K", K);
            context__.validate_dims("data initialization", "Z", "matrix_d", context__.to_vec(N,K));
            validate_non_negative_index("Z", "N", N);
            validate_non_negative_index("Z", "K", K);
            Z = matrix_d(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(K));
            vals_r__ = context__.vals_r("Z");
            pos__ = 0;
            size_t Z_m_mat_lim__ = N;
            size_t Z_n_mat_lim__ = K;
            for (size_t n_mat__ = 0; n_mat__ < Z_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < Z_m_mat_lim__; ++m_mat__) {
                    Z(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 486;
            validate_non_negative_index("dists_crs", "(Q_s + Q_st)", (Q_s + Q_st));
            validate_non_negative_index("dists_crs", "(logical_gt((Q_s + Q_st),0) ? M : 0 )", (logical_gt((Q_s + Q_st),0) ? M : 0 ));
            context__.validate_dims("data initialization", "dists_crs", "vector_d", context__.to_vec((Q_s + Q_st),(logical_gt((Q_s + Q_st),0) ? M : 0 )));
            validate_non_negative_index("dists_crs", "(Q_s + Q_st)", (Q_s + Q_st));
            validate_non_negative_index("dists_crs", "(logical_gt((Q_s + Q_st),0) ? M : 0 )", (logical_gt((Q_s + Q_st),0) ? M : 0 ));
            dists_crs = std::vector<vector_d>((Q_s + Q_st),vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt((Q_s + Q_st),0) ? M : 0 ))));
            vals_r__ = context__.vals_r("dists_crs");
            pos__ = 0;
            size_t dists_crs_i_vec_lim__ = (logical_gt((Q_s + Q_st),0) ? M : 0 );
            for (size_t i_vec__ = 0; i_vec__ < dists_crs_i_vec_lim__; ++i_vec__) {
                size_t dists_crs_limit_0__ = (Q_s + Q_st);
                for (size_t i_0__ = 0; i_0__ < dists_crs_limit_0__; ++i_0__) {
                    dists_crs[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 487;
            validate_non_negative_index("times_crs", "(Q_t + Q_st)", (Q_t + Q_st));
            validate_non_negative_index("times_crs", "(logical_gt((Q_t + Q_st),0) ? M : 0 )", (logical_gt((Q_t + Q_st),0) ? M : 0 ));
            context__.validate_dims("data initialization", "times_crs", "vector_d", context__.to_vec((Q_t + Q_st),(logical_gt((Q_t + Q_st),0) ? M : 0 )));
            validate_non_negative_index("times_crs", "(Q_t + Q_st)", (Q_t + Q_st));
            validate_non_negative_index("times_crs", "(logical_gt((Q_t + Q_st),0) ? M : 0 )", (logical_gt((Q_t + Q_st),0) ? M : 0 ));
            times_crs = std::vector<vector_d>((Q_t + Q_st),vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt((Q_t + Q_st),0) ? M : 0 ))));
            vals_r__ = context__.vals_r("times_crs");
            pos__ = 0;
            size_t times_crs_i_vec_lim__ = (logical_gt((Q_t + Q_st),0) ? M : 0 );
            for (size_t i_vec__ = 0; i_vec__ < times_crs_i_vec_lim__; ++i_vec__) {
                size_t times_crs_limit_0__ = (Q_t + Q_st);
                for (size_t i_0__ = 0; i_0__ < times_crs_limit_0__; ++i_0__) {
                    times_crs[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 488;
            validate_non_negative_index("weight_mat", "Q", Q);
            validate_non_negative_index("weight_mat", "2", 2);
            context__.validate_dims("data initialization", "weight_mat", "int", context__.to_vec(Q,2));
            validate_non_negative_index("weight_mat", "Q", Q);
            validate_non_negative_index("weight_mat", "2", 2);
            weight_mat = std::vector<std::vector<int> >(Q,std::vector<int>(2,int(0)));
            vals_i__ = context__.vals_i("weight_mat");
            pos__ = 0;
            size_t weight_mat_limit_1__ = 2;
            for (size_t i_1__ = 0; i_1__ < weight_mat_limit_1__; ++i_1__) {
                size_t weight_mat_limit_0__ = Q;
                for (size_t i_0__ = 0; i_0__ < weight_mat_limit_0__; ++i_0__) {
                    weight_mat[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 492;
            validate_non_negative_index("u_s", "(logical_gt((Q_s + Q_st),0) ? N : 0 )", (logical_gt((Q_s + Q_st),0) ? N : 0 ));
            validate_non_negative_index("u_s", "(logical_gt((Q_s + Q_st),0) ? ((Q_s + Q_st) * 2) : 0 )", (logical_gt((Q_s + Q_st),0) ? ((Q_s + Q_st) * 2) : 0 ));
            context__.validate_dims("data initialization", "u_s", "int", context__.to_vec((logical_gt((Q_s + Q_st),0) ? N : 0 ),(logical_gt((Q_s + Q_st),0) ? ((Q_s + Q_st) * 2) : 0 )));
            validate_non_negative_index("u_s", "(logical_gt((Q_s + Q_st),0) ? N : 0 )", (logical_gt((Q_s + Q_st),0) ? N : 0 ));
            validate_non_negative_index("u_s", "(logical_gt((Q_s + Q_st),0) ? ((Q_s + Q_st) * 2) : 0 )", (logical_gt((Q_s + Q_st),0) ? ((Q_s + Q_st) * 2) : 0 ));
            u_s = std::vector<std::vector<int> >((logical_gt((Q_s + Q_st),0) ? N : 0 ),std::vector<int>((logical_gt((Q_s + Q_st),0) ? ((Q_s + Q_st) * 2) : 0 ),int(0)));
            vals_i__ = context__.vals_i("u_s");
            pos__ = 0;
            size_t u_s_limit_1__ = (logical_gt((Q_s + Q_st),0) ? ((Q_s + Q_st) * 2) : 0 );
            for (size_t i_1__ = 0; i_1__ < u_s_limit_1__; ++i_1__) {
                size_t u_s_limit_0__ = (logical_gt((Q_s + Q_st),0) ? N : 0 );
                for (size_t i_0__ = 0; i_0__ < u_s_limit_0__; ++i_0__) {
                    u_s[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 493;
            validate_non_negative_index("u_t", "(logical_gt((Q_t + Q_st),0) ? N : 0 )", (logical_gt((Q_t + Q_st),0) ? N : 0 ));
            validate_non_negative_index("u_t", "(logical_gt((Q_t + Q_st),0) ? ((Q_s + Q_st) * 2) : 0 )", (logical_gt((Q_t + Q_st),0) ? ((Q_s + Q_st) * 2) : 0 ));
            context__.validate_dims("data initialization", "u_t", "int", context__.to_vec((logical_gt((Q_t + Q_st),0) ? N : 0 ),(logical_gt((Q_t + Q_st),0) ? ((Q_s + Q_st) * 2) : 0 )));
            validate_non_negative_index("u_t", "(logical_gt((Q_t + Q_st),0) ? N : 0 )", (logical_gt((Q_t + Q_st),0) ? N : 0 ));
            validate_non_negative_index("u_t", "(logical_gt((Q_t + Q_st),0) ? ((Q_s + Q_st) * 2) : 0 )", (logical_gt((Q_t + Q_st),0) ? ((Q_s + Q_st) * 2) : 0 ));
            u_t = std::vector<std::vector<int> >((logical_gt((Q_t + Q_st),0) ? N : 0 ),std::vector<int>((logical_gt((Q_t + Q_st),0) ? ((Q_s + Q_st) * 2) : 0 ),int(0)));
            vals_i__ = context__.vals_i("u_t");
            pos__ = 0;
            size_t u_t_limit_1__ = (logical_gt((Q_t + Q_st),0) ? ((Q_s + Q_st) * 2) : 0 );
            for (size_t i_1__ = 0; i_1__ < u_t_limit_1__; ++i_1__) {
                size_t u_t_limit_0__ = (logical_gt((Q_t + Q_st),0) ? N : 0 );
                for (size_t i_0__ = 0; i_0__ < u_t_limit_0__; ++i_0__) {
                    u_t[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 494;
            context__.validate_dims("data initialization", "max_distance", "double", context__.to_vec());
            max_distance = double(0);
            vals_r__ = context__.vals_r("max_distance");
            pos__ = 0;
            max_distance = vals_r__[pos__++];
            current_statement_begin__ = 495;
            context__.validate_dims("data initialization", "max_time", "double", context__.to_vec());
            max_time = double(0);
            vals_r__ = context__.vals_r("max_time");
            pos__ = 0;
            max_time = vals_r__[pos__++];
            current_statement_begin__ = 496;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
            validate_non_negative_index("y", "N", N);
            y = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                y[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 497;
            validate_non_negative_index("trials", "N", N);
            context__.validate_dims("data initialization", "trials", "int", context__.to_vec(N));
            validate_non_negative_index("trials", "N", N);
            trials = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("trials");
            pos__ = 0;
            size_t trials_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < trials_limit_0__; ++i_0__) {
                trials[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 501;
            context__.validate_dims("data initialization", "has_intercept", "int", context__.to_vec());
            has_intercept = int(0);
            vals_i__ = context__.vals_i("has_intercept");
            pos__ = 0;
            has_intercept = vals_i__[pos__++];
            current_statement_begin__ = 504;
            context__.validate_dims("data initialization", "link", "int", context__.to_vec());
            link = int(0);
            vals_i__ = context__.vals_i("link");
            pos__ = 0;
            link = vals_i__[pos__++];
            current_statement_begin__ = 508;
            context__.validate_dims("data initialization", "prior_dist", "int", context__.to_vec());
            prior_dist = int(0);
            vals_i__ = context__.vals_i("prior_dist");
            pos__ = 0;
            prior_dist = vals_i__[pos__++];
            current_statement_begin__ = 509;
            context__.validate_dims("data initialization", "prior_dist_for_stap", "int", context__.to_vec());
            prior_dist_for_stap = int(0);
            vals_i__ = context__.vals_i("prior_dist_for_stap");
            pos__ = 0;
            prior_dist_for_stap = vals_i__[pos__++];
            current_statement_begin__ = 510;
            context__.validate_dims("data initialization", "prior_dist_for_intercept", "int", context__.to_vec());
            prior_dist_for_intercept = int(0);
            vals_i__ = context__.vals_i("prior_dist_for_intercept");
            pos__ = 0;
            prior_dist_for_intercept = vals_i__[pos__++];
            current_statement_begin__ = 513;
            context__.validate_dims("data initialization", "prior_dist_for_aux", "int", context__.to_vec());
            prior_dist_for_aux = int(0);
            vals_i__ = context__.vals_i("prior_dist_for_aux");
            pos__ = 0;
            prior_dist_for_aux = vals_i__[pos__++];
            current_statement_begin__ = 516;
            validate_non_negative_index("prior_dist_for_theta_s", "(logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 )", (logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 ));
            context__.validate_dims("data initialization", "prior_dist_for_theta_s", "int", context__.to_vec((logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 )));
            validate_non_negative_index("prior_dist_for_theta_s", "(logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 )", (logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 ));
            prior_dist_for_theta_s = std::vector<int>((logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 ),int(0));
            vals_i__ = context__.vals_i("prior_dist_for_theta_s");
            pos__ = 0;
            size_t prior_dist_for_theta_s_limit_0__ = (logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 );
            for (size_t i_0__ = 0; i_0__ < prior_dist_for_theta_s_limit_0__; ++i_0__) {
                prior_dist_for_theta_s[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 517;
            validate_non_negative_index("prior_dist_for_theta_t", "(logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 )", (logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 ));
            context__.validate_dims("data initialization", "prior_dist_for_theta_t", "int", context__.to_vec((logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 )));
            validate_non_negative_index("prior_dist_for_theta_t", "(logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 )", (logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 ));
            prior_dist_for_theta_t = std::vector<int>((logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 ),int(0));
            vals_i__ = context__.vals_i("prior_dist_for_theta_t");
            pos__ = 0;
            size_t prior_dist_for_theta_t_limit_0__ = (logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 );
            for (size_t i_0__ = 0; i_0__ < prior_dist_for_theta_t_limit_0__; ++i_0__) {
                prior_dist_for_theta_t[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 521;
            context__.validate_dims("data initialization", "has_weights", "int", context__.to_vec());
            has_weights = int(0);
            vals_i__ = context__.vals_i("has_weights");
            pos__ = 0;
            has_weights = vals_i__[pos__++];
            current_statement_begin__ = 522;
            validate_non_negative_index("weights", "(has_weights ? N : 0 )", (has_weights ? N : 0 ));
            context__.validate_dims("data initialization", "weights", "vector_d", context__.to_vec((has_weights ? N : 0 )));
            validate_non_negative_index("weights", "(has_weights ? N : 0 )", (has_weights ? N : 0 ));
            weights = vector_d(static_cast<Eigen::VectorXd::Index>((has_weights ? N : 0 )));
            vals_r__ = context__.vals_r("weights");
            pos__ = 0;
            size_t weights_i_vec_lim__ = (has_weights ? N : 0 );
            for (size_t i_vec__ = 0; i_vec__ < weights_i_vec_lim__; ++i_vec__) {
                weights[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 525;
            context__.validate_dims("data initialization", "has_offset", "int", context__.to_vec());
            has_offset = int(0);
            vals_i__ = context__.vals_i("has_offset");
            pos__ = 0;
            has_offset = vals_i__[pos__++];
            current_statement_begin__ = 526;
            validate_non_negative_index("offset", "(has_offset ? N : 0 )", (has_offset ? N : 0 ));
            context__.validate_dims("data initialization", "offset", "vector_d", context__.to_vec((has_offset ? N : 0 )));
            validate_non_negative_index("offset", "(has_offset ? N : 0 )", (has_offset ? N : 0 ));
            offset = vector_d(static_cast<Eigen::VectorXd::Index>((has_offset ? N : 0 )));
            vals_r__ = context__.vals_r("offset");
            pos__ = 0;
            size_t offset_i_vec_lim__ = (has_offset ? N : 0 );
            for (size_t i_vec__ = 0; i_vec__ < offset_i_vec_lim__; ++i_vec__) {
                offset[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 527;
            context__.validate_dims("data initialization", "family", "int", context__.to_vec());
            family = int(0);
            vals_i__ = context__.vals_i("family");
            pos__ = 0;
            family = vals_i__[pos__++];
            current_statement_begin__ = 531;
            validate_non_negative_index("prior_scale", "K", K);
            context__.validate_dims("data initialization", "prior_scale", "vector_d", context__.to_vec(K));
            validate_non_negative_index("prior_scale", "K", K);
            prior_scale = vector_d(static_cast<Eigen::VectorXd::Index>(K));
            vals_r__ = context__.vals_r("prior_scale");
            pos__ = 0;
            size_t prior_scale_i_vec_lim__ = K;
            for (size_t i_vec__ = 0; i_vec__ < prior_scale_i_vec_lim__; ++i_vec__) {
                prior_scale[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 532;
            validate_non_negative_index("prior_scale_for_stap", "Q", Q);
            context__.validate_dims("data initialization", "prior_scale_for_stap", "vector_d", context__.to_vec(Q));
            validate_non_negative_index("prior_scale_for_stap", "Q", Q);
            prior_scale_for_stap = vector_d(static_cast<Eigen::VectorXd::Index>(Q));
            vals_r__ = context__.vals_r("prior_scale_for_stap");
            pos__ = 0;
            size_t prior_scale_for_stap_i_vec_lim__ = Q;
            for (size_t i_vec__ = 0; i_vec__ < prior_scale_for_stap_i_vec_lim__; ++i_vec__) {
                prior_scale_for_stap[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 533;
            validate_non_negative_index("prior_scale_for_theta_s", "(logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 )", (logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 ));
            context__.validate_dims("data initialization", "prior_scale_for_theta_s", "vector_d", context__.to_vec((logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 )));
            validate_non_negative_index("prior_scale_for_theta_s", "(logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 )", (logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 ));
            prior_scale_for_theta_s = vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 )));
            vals_r__ = context__.vals_r("prior_scale_for_theta_s");
            pos__ = 0;
            size_t prior_scale_for_theta_s_i_vec_lim__ = (logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < prior_scale_for_theta_s_i_vec_lim__; ++i_vec__) {
                prior_scale_for_theta_s[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 534;
            validate_non_negative_index("prior_scale_for_theta_t", "(logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 )", (logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 ));
            context__.validate_dims("data initialization", "prior_scale_for_theta_t", "vector_d", context__.to_vec((logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 )));
            validate_non_negative_index("prior_scale_for_theta_t", "(logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 )", (logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 ));
            prior_scale_for_theta_t = vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 )));
            vals_r__ = context__.vals_r("prior_scale_for_theta_t");
            pos__ = 0;
            size_t prior_scale_for_theta_t_i_vec_lim__ = (logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < prior_scale_for_theta_t_i_vec_lim__; ++i_vec__) {
                prior_scale_for_theta_t[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 535;
            context__.validate_dims("data initialization", "prior_scale_for_intercept", "double", context__.to_vec());
            prior_scale_for_intercept = double(0);
            vals_r__ = context__.vals_r("prior_scale_for_intercept");
            pos__ = 0;
            prior_scale_for_intercept = vals_r__[pos__++];
            current_statement_begin__ = 536;
            context__.validate_dims("data initialization", "prior_scale_for_aux", "double", context__.to_vec());
            prior_scale_for_aux = double(0);
            vals_r__ = context__.vals_r("prior_scale_for_aux");
            pos__ = 0;
            prior_scale_for_aux = vals_r__[pos__++];
            current_statement_begin__ = 537;
            validate_non_negative_index("prior_mean", "K", K);
            context__.validate_dims("data initialization", "prior_mean", "vector_d", context__.to_vec(K));
            validate_non_negative_index("prior_mean", "K", K);
            prior_mean = vector_d(static_cast<Eigen::VectorXd::Index>(K));
            vals_r__ = context__.vals_r("prior_mean");
            pos__ = 0;
            size_t prior_mean_i_vec_lim__ = K;
            for (size_t i_vec__ = 0; i_vec__ < prior_mean_i_vec_lim__; ++i_vec__) {
                prior_mean[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 538;
            validate_non_negative_index("prior_mean_for_stap", "Q", Q);
            context__.validate_dims("data initialization", "prior_mean_for_stap", "vector_d", context__.to_vec(Q));
            validate_non_negative_index("prior_mean_for_stap", "Q", Q);
            prior_mean_for_stap = vector_d(static_cast<Eigen::VectorXd::Index>(Q));
            vals_r__ = context__.vals_r("prior_mean_for_stap");
            pos__ = 0;
            size_t prior_mean_for_stap_i_vec_lim__ = Q;
            for (size_t i_vec__ = 0; i_vec__ < prior_mean_for_stap_i_vec_lim__; ++i_vec__) {
                prior_mean_for_stap[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 539;
            validate_non_negative_index("prior_mean_for_theta_s", "(logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 )", (logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 ));
            context__.validate_dims("data initialization", "prior_mean_for_theta_s", "vector_d", context__.to_vec((logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 )));
            validate_non_negative_index("prior_mean_for_theta_s", "(logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 )", (logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 ));
            prior_mean_for_theta_s = vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 )));
            vals_r__ = context__.vals_r("prior_mean_for_theta_s");
            pos__ = 0;
            size_t prior_mean_for_theta_s_i_vec_lim__ = (logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < prior_mean_for_theta_s_i_vec_lim__; ++i_vec__) {
                prior_mean_for_theta_s[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 540;
            validate_non_negative_index("prior_mean_for_theta_t", "(logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 )", (logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 ));
            context__.validate_dims("data initialization", "prior_mean_for_theta_t", "vector_d", context__.to_vec((logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 )));
            validate_non_negative_index("prior_mean_for_theta_t", "(logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 )", (logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 ));
            prior_mean_for_theta_t = vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 )));
            vals_r__ = context__.vals_r("prior_mean_for_theta_t");
            pos__ = 0;
            size_t prior_mean_for_theta_t_i_vec_lim__ = (logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < prior_mean_for_theta_t_i_vec_lim__; ++i_vec__) {
                prior_mean_for_theta_t[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 541;
            context__.validate_dims("data initialization", "prior_mean_for_intercept", "double", context__.to_vec());
            prior_mean_for_intercept = double(0);
            vals_r__ = context__.vals_r("prior_mean_for_intercept");
            pos__ = 0;
            prior_mean_for_intercept = vals_r__[pos__++];
            current_statement_begin__ = 542;
            context__.validate_dims("data initialization", "prior_mean_for_aux", "double", context__.to_vec());
            prior_mean_for_aux = double(0);
            vals_r__ = context__.vals_r("prior_mean_for_aux");
            pos__ = 0;
            prior_mean_for_aux = vals_r__[pos__++];
            current_statement_begin__ = 543;
            validate_non_negative_index("prior_df", "K", K);
            context__.validate_dims("data initialization", "prior_df", "vector_d", context__.to_vec(K));
            validate_non_negative_index("prior_df", "K", K);
            prior_df = vector_d(static_cast<Eigen::VectorXd::Index>(K));
            vals_r__ = context__.vals_r("prior_df");
            pos__ = 0;
            size_t prior_df_i_vec_lim__ = K;
            for (size_t i_vec__ = 0; i_vec__ < prior_df_i_vec_lim__; ++i_vec__) {
                prior_df[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 544;
            context__.validate_dims("data initialization", "prior_df_for_intercept", "double", context__.to_vec());
            prior_df_for_intercept = double(0);
            vals_r__ = context__.vals_r("prior_df_for_intercept");
            pos__ = 0;
            prior_df_for_intercept = vals_r__[pos__++];
            current_statement_begin__ = 545;
            context__.validate_dims("data initialization", "prior_df_for_aux", "double", context__.to_vec());
            prior_df_for_aux = double(0);
            vals_r__ = context__.vals_r("prior_df_for_aux");
            pos__ = 0;
            prior_df_for_aux = vals_r__[pos__++];
            current_statement_begin__ = 546;
            validate_non_negative_index("prior_df_for_theta_s", "(logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 )", (logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 ));
            context__.validate_dims("data initialization", "prior_df_for_theta_s", "vector_d", context__.to_vec((logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 )));
            validate_non_negative_index("prior_df_for_theta_s", "(logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 )", (logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 ));
            prior_df_for_theta_s = vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 )));
            vals_r__ = context__.vals_r("prior_df_for_theta_s");
            pos__ = 0;
            size_t prior_df_for_theta_s_i_vec_lim__ = (logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < prior_df_for_theta_s_i_vec_lim__; ++i_vec__) {
                prior_df_for_theta_s[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 547;
            validate_non_negative_index("prior_df_for_theta_t", "(logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 )", (logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 ));
            context__.validate_dims("data initialization", "prior_df_for_theta_t", "vector_d", context__.to_vec((logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 )));
            validate_non_negative_index("prior_df_for_theta_t", "(logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 )", (logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 ));
            prior_df_for_theta_t = vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 )));
            vals_r__ = context__.vals_r("prior_df_for_theta_t");
            pos__ = 0;
            size_t prior_df_for_theta_t_i_vec_lim__ = (logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 );
            for (size_t i_vec__ = 0; i_vec__ < prior_df_for_theta_t_i_vec_lim__; ++i_vec__) {
                prior_df_for_theta_t[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 548;
            validate_non_negative_index("prior_df_for_stap", "Q", Q);
            context__.validate_dims("data initialization", "prior_df_for_stap", "vector_d", context__.to_vec(Q));
            validate_non_negative_index("prior_df_for_stap", "Q", Q);
            prior_df_for_stap = vector_d(static_cast<Eigen::VectorXd::Index>(Q));
            vals_r__ = context__.vals_r("prior_df_for_stap");
            pos__ = 0;
            size_t prior_df_for_stap_i_vec_lim__ = Q;
            for (size_t i_vec__ = 0; i_vec__ < prior_df_for_stap_i_vec_lim__; ++i_vec__) {
                prior_df_for_stap[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 550;
            validate_non_negative_index("num_normals", "(logical_eq(prior_dist,7) ? K : 0 )", (logical_eq(prior_dist,7) ? K : 0 ));
            context__.validate_dims("data initialization", "num_normals", "int", context__.to_vec((logical_eq(prior_dist,7) ? K : 0 )));
            validate_non_negative_index("num_normals", "(logical_eq(prior_dist,7) ? K : 0 )", (logical_eq(prior_dist,7) ? K : 0 ));
            num_normals = std::vector<int>((logical_eq(prior_dist,7) ? K : 0 ),int(0));
            vals_i__ = context__.vals_i("num_normals");
            pos__ = 0;
            size_t num_normals_limit_0__ = (logical_eq(prior_dist,7) ? K : 0 );
            for (size_t i_0__ = 0; i_0__ < num_normals_limit_0__; ++i_0__) {
                num_normals[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 551;
            validate_non_negative_index("num_normals_for_stap", "(logical_eq(prior_dist_for_stap,7) ? Q : 0 )", (logical_eq(prior_dist_for_stap,7) ? Q : 0 ));
            context__.validate_dims("data initialization", "num_normals_for_stap", "int", context__.to_vec((logical_eq(prior_dist_for_stap,7) ? Q : 0 )));
            validate_non_negative_index("num_normals_for_stap", "(logical_eq(prior_dist_for_stap,7) ? Q : 0 )", (logical_eq(prior_dist_for_stap,7) ? Q : 0 ));
            num_normals_for_stap = std::vector<int>((logical_eq(prior_dist_for_stap,7) ? Q : 0 ),int(0));
            vals_i__ = context__.vals_i("num_normals_for_stap");
            pos__ = 0;
            size_t num_normals_for_stap_limit_0__ = (logical_eq(prior_dist_for_stap,7) ? Q : 0 );
            for (size_t i_0__ = 0; i_0__ < num_normals_for_stap_limit_0__; ++i_0__) {
                num_normals_for_stap[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 555;
            context__.validate_dims("data initialization", "t", "int", context__.to_vec());
            t = int(0);
            vals_i__ = context__.vals_i("t");
            pos__ = 0;
            t = vals_i__[pos__++];
            current_statement_begin__ = 556;
            validate_non_negative_index("p", "t", t);
            context__.validate_dims("data initialization", "p", "int", context__.to_vec(t));
            validate_non_negative_index("p", "t", t);
            p = std::vector<int>(t,int(0));
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            size_t p_limit_0__ = t;
            for (size_t i_0__ = 0; i_0__ < p_limit_0__; ++i_0__) {
                p[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 557;
            validate_non_negative_index("l", "t", t);
            context__.validate_dims("data initialization", "l", "int", context__.to_vec(t));
            validate_non_negative_index("l", "t", t);
            l = std::vector<int>(t,int(0));
            vals_i__ = context__.vals_i("l");
            pos__ = 0;
            size_t l_limit_0__ = t;
            for (size_t i_0__ = 0; i_0__ < l_limit_0__; ++i_0__) {
                l[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 558;
            context__.validate_dims("data initialization", "q", "int", context__.to_vec());
            q = int(0);
            vals_i__ = context__.vals_i("q");
            pos__ = 0;
            q = vals_i__[pos__++];
            current_statement_begin__ = 559;
            context__.validate_dims("data initialization", "len_theta_L", "int", context__.to_vec());
            len_theta_L = int(0);
            vals_i__ = context__.vals_i("len_theta_L");
            pos__ = 0;
            len_theta_L = vals_i__[pos__++];
            current_statement_begin__ = 562;
            validate_non_negative_index("shape", "t", t);
            context__.validate_dims("data initialization", "shape", "vector_d", context__.to_vec(t));
            validate_non_negative_index("shape", "t", t);
            shape = vector_d(static_cast<Eigen::VectorXd::Index>(t));
            vals_r__ = context__.vals_r("shape");
            pos__ = 0;
            size_t shape_i_vec_lim__ = t;
            for (size_t i_vec__ = 0; i_vec__ < shape_i_vec_lim__; ++i_vec__) {
                shape[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 563;
            validate_non_negative_index("scale", "t", t);
            context__.validate_dims("data initialization", "scale", "vector_d", context__.to_vec(t));
            validate_non_negative_index("scale", "t", t);
            scale = vector_d(static_cast<Eigen::VectorXd::Index>(t));
            vals_r__ = context__.vals_r("scale");
            pos__ = 0;
            size_t scale_i_vec_lim__ = t;
            for (size_t i_vec__ = 0; i_vec__ < scale_i_vec_lim__; ++i_vec__) {
                scale[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 564;
            context__.validate_dims("data initialization", "len_concentration", "int", context__.to_vec());
            len_concentration = int(0);
            vals_i__ = context__.vals_i("len_concentration");
            pos__ = 0;
            len_concentration = vals_i__[pos__++];
            current_statement_begin__ = 565;
            validate_non_negative_index("concentration", "len_concentration", len_concentration);
            context__.validate_dims("data initialization", "concentration", "double", context__.to_vec(len_concentration));
            validate_non_negative_index("concentration", "len_concentration", len_concentration);
            concentration = std::vector<double>(len_concentration,double(0));
            vals_r__ = context__.vals_r("concentration");
            pos__ = 0;
            size_t concentration_limit_0__ = len_concentration;
            for (size_t i_0__ = 0; i_0__ < concentration_limit_0__; ++i_0__) {
                concentration[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 566;
            context__.validate_dims("data initialization", "len_regularization", "int", context__.to_vec());
            len_regularization = int(0);
            vals_i__ = context__.vals_i("len_regularization");
            pos__ = 0;
            len_regularization = vals_i__[pos__++];
            current_statement_begin__ = 567;
            validate_non_negative_index("regularization", "len_regularization", len_regularization);
            context__.validate_dims("data initialization", "regularization", "double", context__.to_vec(len_regularization));
            validate_non_negative_index("regularization", "len_regularization", len_regularization);
            regularization = std::vector<double>(len_regularization,double(0));
            vals_r__ = context__.vals_r("regularization");
            pos__ = 0;
            size_t regularization_limit_0__ = len_regularization;
            for (size_t i_0__ = 0; i_0__ < regularization_limit_0__; ++i_0__) {
                regularization[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 569;
            context__.validate_dims("data initialization", "num_non_zero", "int", context__.to_vec());
            num_non_zero = int(0);
            vals_i__ = context__.vals_i("num_non_zero");
            pos__ = 0;
            num_non_zero = vals_i__[pos__++];
            current_statement_begin__ = 570;
            validate_non_negative_index("w", "num_non_zero", num_non_zero);
            context__.validate_dims("data initialization", "w", "vector_d", context__.to_vec(num_non_zero));
            validate_non_negative_index("w", "num_non_zero", num_non_zero);
            w = vector_d(static_cast<Eigen::VectorXd::Index>(num_non_zero));
            vals_r__ = context__.vals_r("w");
            pos__ = 0;
            size_t w_i_vec_lim__ = num_non_zero;
            for (size_t i_vec__ = 0; i_vec__ < w_i_vec_lim__; ++i_vec__) {
                w[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 571;
            validate_non_negative_index("v", "num_non_zero", num_non_zero);
            context__.validate_dims("data initialization", "v", "int", context__.to_vec(num_non_zero));
            validate_non_negative_index("v", "num_non_zero", num_non_zero);
            v = std::vector<int>(num_non_zero,int(0));
            vals_i__ = context__.vals_i("v");
            pos__ = 0;
            size_t v_limit_0__ = num_non_zero;
            for (size_t i_0__ = 0; i_0__ < v_limit_0__; ++i_0__) {
                v[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 572;
            validate_non_negative_index("u", "(logical_gt(t,0) ? (N + 1) : 0 )", (logical_gt(t,0) ? (N + 1) : 0 ));
            context__.validate_dims("data initialization", "u", "int", context__.to_vec((logical_gt(t,0) ? (N + 1) : 0 )));
            validate_non_negative_index("u", "(logical_gt(t,0) ? (N + 1) : 0 )", (logical_gt(t,0) ? (N + 1) : 0 ));
            u = std::vector<int>((logical_gt(t,0) ? (N + 1) : 0 ),int(0));
            vals_i__ = context__.vals_i("u");
            pos__ = 0;
            size_t u_limit_0__ = (logical_gt(t,0) ? (N + 1) : 0 );
            for (size_t i_0__ = 0; i_0__ < u_limit_0__; ++i_0__) {
                u[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 573;
            context__.validate_dims("data initialization", "special_case", "int", context__.to_vec());
            special_case = int(0);
            vals_i__ = context__.vals_i("special_case");
            pos__ = 0;
            special_case = vals_i__[pos__++];

            // validate, data variables
            current_statement_begin__ = 473;
            check_greater_or_equal(function__,"N",N,0);
            current_statement_begin__ = 474;
            check_greater_or_equal(function__,"K",K,0);
            current_statement_begin__ = 475;
            check_greater_or_equal(function__,"Q",Q,0);
            current_statement_begin__ = 476;
            for (int k0__ = 0; k0__ < Q; ++k0__) {
                check_greater_or_equal(function__,"log_ar[k0__]",log_ar[k0__],0);
                check_less_or_equal(function__,"log_ar[k0__]",log_ar[k0__],1);
            }
            current_statement_begin__ = 477;
            for (int k0__ = 0; k0__ < Q; ++k0__) {
                check_greater_or_equal(function__,"stap_code[k0__]",stap_code[k0__],0);
                check_less_or_equal(function__,"stap_code[k0__]",stap_code[k0__],2);
            }
            current_statement_begin__ = 478;
            check_greater_or_equal(function__,"Q_t",Q_t,0);
            current_statement_begin__ = 479;
            check_greater_or_equal(function__,"Q_s",Q_s,0);
            current_statement_begin__ = 480;
            check_greater_or_equal(function__,"Q_st",Q_st,0);
            check_less_or_equal(function__,"Q_st",Q_st,((Q - Q_t) - Q_s));
            current_statement_begin__ = 481;
            check_greater_or_equal(function__,"M",M,0);
            current_statement_begin__ = 484;
            current_statement_begin__ = 485;
            current_statement_begin__ = 486;
            for (int k0__ = 0; k0__ < (Q_s + Q_st); ++k0__) {
                check_greater_or_equal(function__,"dists_crs[k0__]",dists_crs[k0__],0);
            }
            current_statement_begin__ = 487;
            for (int k0__ = 0; k0__ < (Q_t + Q_st); ++k0__) {
                check_greater_or_equal(function__,"times_crs[k0__]",times_crs[k0__],0);
            }
            current_statement_begin__ = 488;
            for (int k0__ = 0; k0__ < Q; ++k0__) {
                for (int k1__ = 0; k1__ < 2; ++k1__) {
                    check_greater_or_equal(function__,"weight_mat[k0__][k1__]",weight_mat[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 492;
            current_statement_begin__ = 493;
            current_statement_begin__ = 494;
            check_greater_or_equal(function__,"max_distance",max_distance,0);
            current_statement_begin__ = 495;
            check_greater_or_equal(function__,"max_time",max_time,0);
            current_statement_begin__ = 496;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"y[k0__]",y[k0__],0);
            }
            current_statement_begin__ = 497;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"trials[k0__]",trials[k0__],0);
            }
            current_statement_begin__ = 501;
            check_greater_or_equal(function__,"has_intercept",has_intercept,0);
            check_less_or_equal(function__,"has_intercept",has_intercept,1);
            current_statement_begin__ = 504;
            check_greater_or_equal(function__,"link",link,1);
            current_statement_begin__ = 508;
            check_greater_or_equal(function__,"prior_dist",prior_dist,0);
            check_less_or_equal(function__,"prior_dist",prior_dist,7);
            current_statement_begin__ = 509;
            check_greater_or_equal(function__,"prior_dist_for_stap",prior_dist_for_stap,0);
            check_less_or_equal(function__,"prior_dist_for_stap",prior_dist_for_stap,7);
            current_statement_begin__ = 510;
            check_greater_or_equal(function__,"prior_dist_for_intercept",prior_dist_for_intercept,0);
            check_less_or_equal(function__,"prior_dist_for_intercept",prior_dist_for_intercept,2);
            current_statement_begin__ = 513;
            check_greater_or_equal(function__,"prior_dist_for_aux",prior_dist_for_aux,0);
            check_less_or_equal(function__,"prior_dist_for_aux",prior_dist_for_aux,3);
            current_statement_begin__ = 516;
            for (int k0__ = 0; k0__ < (logical_gt((Q_s + Q_st),0) ? (Q_s + Q_st) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"prior_dist_for_theta_s[k0__]",prior_dist_for_theta_s[k0__],0);
                check_less_or_equal(function__,"prior_dist_for_theta_s[k0__]",prior_dist_for_theta_s[k0__],9);
            }
            current_statement_begin__ = 517;
            for (int k0__ = 0; k0__ < (logical_gt((Q_t + Q_st),0) ? (Q_t + Q_st) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"prior_dist_for_theta_t[k0__]",prior_dist_for_theta_t[k0__],0);
                check_less_or_equal(function__,"prior_dist_for_theta_t[k0__]",prior_dist_for_theta_t[k0__],9);
            }
            current_statement_begin__ = 521;
            check_greater_or_equal(function__,"has_weights",has_weights,0);
            check_less_or_equal(function__,"has_weights",has_weights,1);
            current_statement_begin__ = 522;
            current_statement_begin__ = 525;
            check_greater_or_equal(function__,"has_offset",has_offset,0);
            check_less_or_equal(function__,"has_offset",has_offset,1);
            current_statement_begin__ = 526;
            current_statement_begin__ = 527;
            check_greater_or_equal(function__,"family",family,5);
            check_less_or_equal(function__,"family",family,5);
            current_statement_begin__ = 531;
            check_greater_or_equal(function__,"prior_scale",prior_scale,0);
            current_statement_begin__ = 532;
            check_greater_or_equal(function__,"prior_scale_for_stap",prior_scale_for_stap,0);
            current_statement_begin__ = 533;
            check_greater_or_equal(function__,"prior_scale_for_theta_s",prior_scale_for_theta_s,0);
            current_statement_begin__ = 534;
            check_greater_or_equal(function__,"prior_scale_for_theta_t",prior_scale_for_theta_t,0);
            current_statement_begin__ = 535;
            check_greater_or_equal(function__,"prior_scale_for_intercept",prior_scale_for_intercept,0);
            current_statement_begin__ = 536;
            check_greater_or_equal(function__,"prior_scale_for_aux",prior_scale_for_aux,0);
            current_statement_begin__ = 537;
            current_statement_begin__ = 538;
            current_statement_begin__ = 539;
            current_statement_begin__ = 540;
            current_statement_begin__ = 541;
            current_statement_begin__ = 542;
            check_greater_or_equal(function__,"prior_mean_for_aux",prior_mean_for_aux,0);
            current_statement_begin__ = 543;
            check_greater_or_equal(function__,"prior_df",prior_df,0);
            current_statement_begin__ = 544;
            check_greater_or_equal(function__,"prior_df_for_intercept",prior_df_for_intercept,0);
            current_statement_begin__ = 545;
            check_greater_or_equal(function__,"prior_df_for_aux",prior_df_for_aux,0);
            current_statement_begin__ = 546;
            check_greater_or_equal(function__,"prior_df_for_theta_s",prior_df_for_theta_s,0);
            current_statement_begin__ = 547;
            check_greater_or_equal(function__,"prior_df_for_theta_t",prior_df_for_theta_t,0);
            current_statement_begin__ = 548;
            check_greater_or_equal(function__,"prior_df_for_stap",prior_df_for_stap,0);
            current_statement_begin__ = 550;
            for (int k0__ = 0; k0__ < (logical_eq(prior_dist,7) ? K : 0 ); ++k0__) {
                check_greater_or_equal(function__,"num_normals[k0__]",num_normals[k0__],2);
            }
            current_statement_begin__ = 551;
            for (int k0__ = 0; k0__ < (logical_eq(prior_dist_for_stap,7) ? Q : 0 ); ++k0__) {
                check_greater_or_equal(function__,"num_normals_for_stap[k0__]",num_normals_for_stap[k0__],2);
            }
            current_statement_begin__ = 555;
            check_greater_or_equal(function__,"t",t,0);
            current_statement_begin__ = 556;
            for (int k0__ = 0; k0__ < t; ++k0__) {
                check_greater_or_equal(function__,"p[k0__]",p[k0__],1);
            }
            current_statement_begin__ = 557;
            for (int k0__ = 0; k0__ < t; ++k0__) {
                check_greater_or_equal(function__,"l[k0__]",l[k0__],1);
            }
            current_statement_begin__ = 558;
            check_greater_or_equal(function__,"q",q,0);
            current_statement_begin__ = 559;
            check_greater_or_equal(function__,"len_theta_L",len_theta_L,0);
            current_statement_begin__ = 562;
            check_greater_or_equal(function__,"shape",shape,0);
            current_statement_begin__ = 563;
            check_greater_or_equal(function__,"scale",scale,0);
            current_statement_begin__ = 564;
            check_greater_or_equal(function__,"len_concentration",len_concentration,0);
            current_statement_begin__ = 565;
            for (int k0__ = 0; k0__ < len_concentration; ++k0__) {
                check_greater_or_equal(function__,"concentration[k0__]",concentration[k0__],0);
            }
            current_statement_begin__ = 566;
            check_greater_or_equal(function__,"len_regularization",len_regularization,0);
            current_statement_begin__ = 567;
            for (int k0__ = 0; k0__ < len_regularization; ++k0__) {
                check_greater_or_equal(function__,"regularization[k0__]",regularization[k0__],0);
            }
            current_statement_begin__ = 569;
            check_greater_or_equal(function__,"num_non_zero",num_non_zero,0);
            current_statement_begin__ = 570;
            current_statement_begin__ = 571;
            for (int k0__ = 0; k0__ < num_non_zero; ++k0__) {
                check_greater_or_equal(function__,"v[k0__]",v[k0__],0);
                check_less_or_equal(function__,"v[k0__]",v[k0__],(q - 1));
            }
            current_statement_begin__ = 572;
            for (int k0__ = 0; k0__ < (logical_gt(t,0) ? (N + 1) : 0 ); ++k0__) {
                check_greater_or_equal(function__,"u[k0__]",u[k0__],0);
                check_less_or_equal(function__,"u[k0__]",u[k0__],(rows(w) + 1));
            }
            current_statement_begin__ = 573;
            check_greater_or_equal(function__,"special_case",special_case,0);
            check_less_or_equal(function__,"special_case",special_case,1);
            // initialize data variables
            current_statement_begin__ = 576;
            aux = double(0);
            stan::math::fill(aux,DUMMY_VAR__);
            stan::math::assign(aux,stan::math::not_a_number());
            current_statement_begin__ = 577;
            validate_non_negative_index("V", "(special_case ? t : 0 )", (special_case ? t : 0 ));
            validate_non_negative_index("V", "N", N);
            V = std::vector<std::vector<int> >((special_case ? t : 0 ),std::vector<int>(N,int(0)));
            stan::math::fill(V, std::numeric_limits<int>::min());
            stan::math::assign(V,make_V(N,(special_case ? t : 0 ),v, pstream__));
            current_statement_begin__ = 578;
            len_z_T = int(0);
            stan::math::fill(len_z_T, std::numeric_limits<int>::min());
            stan::math::assign(len_z_T,0);
            current_statement_begin__ = 579;
            len_var_group = int(0);
            stan::math::fill(len_var_group, std::numeric_limits<int>::min());
            stan::math::assign(len_var_group,(sum(p) * logical_gt(t,0)));
            current_statement_begin__ = 580;
            len_rho = int(0);
            stan::math::fill(len_rho, std::numeric_limits<int>::min());
            stan::math::assign(len_rho,(sum(p) - t));
            current_statement_begin__ = 581;
            is_continuous = int(0);
            stan::math::fill(is_continuous, std::numeric_limits<int>::min());
            stan::math::assign(is_continuous,0);
            current_statement_begin__ = 582;
            pos = int(0);
            stan::math::fill(pos, std::numeric_limits<int>::min());
            stan::math::assign(pos,1);
            current_statement_begin__ = 583;
            validate_non_negative_index("del", "len_concentration", len_concentration);
            del = std::vector<double>(len_concentration,double(0));
            stan::math::fill(del,DUMMY_VAR__);
            current_statement_begin__ = 584;
            hs = int(0);
            stan::math::fill(hs, std::numeric_limits<int>::min());

            current_statement_begin__ = 585;
            if (as_bool(logical_lte(prior_dist,2))) {
                current_statement_begin__ = 585;
                stan::math::assign(hs, 0);
            } else if (as_bool(logical_eq(prior_dist,3))) {
                current_statement_begin__ = 586;
                stan::math::assign(hs, 2);
            } else if (as_bool(logical_eq(prior_dist,4))) {
                current_statement_begin__ = 587;
                stan::math::assign(hs, 4);
            } else {
                current_statement_begin__ = 588;
                stan::math::assign(hs, 0);
            }
            current_statement_begin__ = 590;
            stan::math::assign(pos, 1);
            current_statement_begin__ = 591;
            for (int i = 1; i <= t; ++i) {

                current_statement_begin__ = 592;
                if (as_bool(logical_gt(get_base1(p,i,"p",1),1))) {

                    current_statement_begin__ = 593;
                    for (int j = 1; j <= get_base1(p,i,"p",1); ++j) {

                        current_statement_begin__ = 594;
                        stan::model::assign(del, 
                                    stan::model::cons_list(stan::model::index_uni(pos), stan::model::nil_index_list()), 
                                    get_base1(concentration,j,"concentration",1), 
                                    "assigning variable del");
                        current_statement_begin__ = 595;
                        stan::math::assign(pos, stan::model::deep_copy((pos + 1)));
                    }
                }
                current_statement_begin__ = 598;
                for (int j = 3; j <= get_base1(p,i,"p",1); ++j) {
                    current_statement_begin__ = 598;
                    stan::math::assign(len_z_T, stan::model::deep_copy(((len_z_T + get_base1(p,i,"p",1)) - 1)));
                }
            }

            // validate transformed data
            current_statement_begin__ = 576;
            current_statement_begin__ = 577;
            for (int k0__ = 0; k0__ < (special_case ? t : 0 ); ++k0__) {
                for (int k1__ = 0; k1__ < N; ++k1__) {
                    check_greater_or_equal(function__,"V[k0__][k1__]",V[k0__][k1__],1);
                }
            }
            current_statement_begin__ = 578;
            check_greater_or_equal(function__,"len_z_T",len_z_T,0);
            current_statement_begin__ = 579;
            check_greater_or_equal(function__,"len_var_group",len_var_group,0);
            current_statement_begin__ = 580;
            check_greater_or_equal(function__,"len_rho",len_rho,0);
            current_statement_begin__ = 581;
            check_greater_or_equal(function__,"is_continuous",is_continuous,0);
            check_less_or_equal(function__,"is_continuous",is_continuous,1);
            current_statement_begin__ = 582;
            check_greater_or_equal(function__,"pos",pos,1);
            current_statement_begin__ = 583;
            for (int k0__ = 0; k0__ < len_concentration; ++k0__) {
                check_greater_or_equal(function__,"del[k0__]",del[k0__],0);
            }
            current_statement_begin__ = 584;
            check_greater_or_equal(function__,"hs",hs,0);

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 602;
            validate_non_negative_index("gamma", "has_intercept", has_intercept);
            num_params_r__ += has_intercept;
            current_statement_begin__ = 605;
            validate_non_negative_index("z_delta", "(logical_eq(prior_dist,7) ? sum(num_normals) : K )", (logical_eq(prior_dist,7) ? sum(num_normals) : K ));
            num_params_r__ += (logical_eq(prior_dist,7) ? sum(num_normals) : K );
            current_statement_begin__ = 606;
            validate_non_negative_index("mix", "K", K);
            validate_non_negative_index("mix", "(primitive_value(logical_eq(prior_dist,5)) || primitive_value(logical_eq(prior_dist,6)))", (primitive_value(logical_eq(prior_dist,5)) || primitive_value(logical_eq(prior_dist,6))));
            num_params_r__ += K * (primitive_value(logical_eq(prior_dist,5)) || primitive_value(logical_eq(prior_dist,6)));
            current_statement_begin__ = 607;
            validate_non_negative_index("z_beta", "(logical_eq(prior_dist_for_stap,7) ? sum(num_normals) : Q )", (logical_eq(prior_dist_for_stap,7) ? sum(num_normals) : Q ));
            num_params_r__ += (logical_eq(prior_dist_for_stap,7) ? sum(num_normals) : Q );
            current_statement_begin__ = 608;
            validate_non_negative_index("mix_stap", "Q", Q);
            validate_non_negative_index("mix_stap", "(primitive_value(logical_eq(prior_dist_for_stap,5)) || primitive_value(logical_eq(prior_dist_for_stap,6)))", (primitive_value(logical_eq(prior_dist_for_stap,5)) || primitive_value(logical_eq(prior_dist_for_stap,6))));
            num_params_r__ += Q * (primitive_value(logical_eq(prior_dist_for_stap,5)) || primitive_value(logical_eq(prior_dist_for_stap,6)));
            current_statement_begin__ = 609;
            validate_non_negative_index("one_over_lambda", "logical_eq(prior_dist,6)", logical_eq(prior_dist,6));
            num_params_r__ += logical_eq(prior_dist,6);
            current_statement_begin__ = 610;
            validate_non_negative_index("one_over_lambda_stap", "logical_eq(prior_dist_for_stap,6)", logical_eq(prior_dist_for_stap,6));
            num_params_r__ += logical_eq(prior_dist_for_stap,6);
            current_statement_begin__ = 611;
            validate_non_negative_index("theta_s", "(Q_s + Q_st)", (Q_s + Q_st));
            num_params_r__ += (Q_s + Q_st);
            current_statement_begin__ = 612;
            validate_non_negative_index("theta_t", "(Q_t + Q_st)", (Q_t + Q_st));
            num_params_r__ += (Q_t + Q_st);
            current_statement_begin__ = 613;
            validate_non_negative_index("z_b", "q", q);
            num_params_r__ += q;
            current_statement_begin__ = 614;
            validate_non_negative_index("z_T", "len_z_T", len_z_T);
            num_params_r__ += len_z_T;
            current_statement_begin__ = 615;
            validate_non_negative_index("rho", "len_rho", len_rho);
            num_params_r__ += len_rho;
            current_statement_begin__ = 616;
            validate_non_negative_index("zeta", "len_concentration", len_concentration);
            num_params_r__ += len_concentration;
            current_statement_begin__ = 617;
            validate_non_negative_index("tau", "t", t);
            num_params_r__ += t;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_stap_binomial() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("gamma")))
            throw std::runtime_error("variable gamma missing");
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "has_intercept", has_intercept);
        context__.validate_dims("initialization", "gamma", "double", context__.to_vec(has_intercept));
        std::vector<double> gamma(has_intercept,double(0));
        for (int i0__ = 0U; i0__ < has_intercept; ++i0__)
            gamma[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < has_intercept; ++i0__)
            try {
            writer__.scalar_ub_unconstrain((logical_eq(link,4) ? 0.0 : stan::math::positive_infinity() ),gamma[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma: ") + e.what());
        }

        if (!(context__.contains_r("z_delta")))
            throw std::runtime_error("variable z_delta missing");
        vals_r__ = context__.vals_r("z_delta");
        pos__ = 0U;
        validate_non_negative_index("z_delta", "(logical_eq(prior_dist,7) ? sum(num_normals) : K )", (logical_eq(prior_dist,7) ? sum(num_normals) : K ));
        context__.validate_dims("initialization", "z_delta", "vector_d", context__.to_vec((logical_eq(prior_dist,7) ? sum(num_normals) : K )));
        vector_d z_delta(static_cast<Eigen::VectorXd::Index>((logical_eq(prior_dist,7) ? sum(num_normals) : K )));
        for (int j1__ = 0U; j1__ < (logical_eq(prior_dist,7) ? sum(num_normals) : K ); ++j1__)
            z_delta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_delta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_delta: ") + e.what());
        }

        if (!(context__.contains_r("mix")))
            throw std::runtime_error("variable mix missing");
        vals_r__ = context__.vals_r("mix");
        pos__ = 0U;
        validate_non_negative_index("mix", "(primitive_value(logical_eq(prior_dist,5)) || primitive_value(logical_eq(prior_dist,6)))", (primitive_value(logical_eq(prior_dist,5)) || primitive_value(logical_eq(prior_dist,6))));
        validate_non_negative_index("mix", "K", K);
        context__.validate_dims("initialization", "mix", "vector_d", context__.to_vec((primitive_value(logical_eq(prior_dist,5)) || primitive_value(logical_eq(prior_dist,6))),K));
        std::vector<vector_d> mix((primitive_value(logical_eq(prior_dist,5)) || primitive_value(logical_eq(prior_dist,6))),vector_d(static_cast<Eigen::VectorXd::Index>(K)));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(prior_dist,5)) || primitive_value(logical_eq(prior_dist,6))); ++i0__)
                mix[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(prior_dist,5)) || primitive_value(logical_eq(prior_dist,6))); ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,mix[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mix: ") + e.what());
        }

        if (!(context__.contains_r("z_beta")))
            throw std::runtime_error("variable z_beta missing");
        vals_r__ = context__.vals_r("z_beta");
        pos__ = 0U;
        validate_non_negative_index("z_beta", "(logical_eq(prior_dist_for_stap,7) ? sum(num_normals) : Q )", (logical_eq(prior_dist_for_stap,7) ? sum(num_normals) : Q ));
        context__.validate_dims("initialization", "z_beta", "vector_d", context__.to_vec((logical_eq(prior_dist_for_stap,7) ? sum(num_normals) : Q )));
        vector_d z_beta(static_cast<Eigen::VectorXd::Index>((logical_eq(prior_dist_for_stap,7) ? sum(num_normals) : Q )));
        for (int j1__ = 0U; j1__ < (logical_eq(prior_dist_for_stap,7) ? sum(num_normals) : Q ); ++j1__)
            z_beta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,z_beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_beta: ") + e.what());
        }

        if (!(context__.contains_r("mix_stap")))
            throw std::runtime_error("variable mix_stap missing");
        vals_r__ = context__.vals_r("mix_stap");
        pos__ = 0U;
        validate_non_negative_index("mix_stap", "(primitive_value(logical_eq(prior_dist_for_stap,5)) || primitive_value(logical_eq(prior_dist_for_stap,6)))", (primitive_value(logical_eq(prior_dist_for_stap,5)) || primitive_value(logical_eq(prior_dist_for_stap,6))));
        validate_non_negative_index("mix_stap", "Q", Q);
        context__.validate_dims("initialization", "mix_stap", "vector_d", context__.to_vec((primitive_value(logical_eq(prior_dist_for_stap,5)) || primitive_value(logical_eq(prior_dist_for_stap,6))),Q));
        std::vector<vector_d> mix_stap((primitive_value(logical_eq(prior_dist_for_stap,5)) || primitive_value(logical_eq(prior_dist_for_stap,6))),vector_d(static_cast<Eigen::VectorXd::Index>(Q)));
        for (int j1__ = 0U; j1__ < Q; ++j1__)
            for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(prior_dist_for_stap,5)) || primitive_value(logical_eq(prior_dist_for_stap,6))); ++i0__)
                mix_stap[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (primitive_value(logical_eq(prior_dist_for_stap,5)) || primitive_value(logical_eq(prior_dist_for_stap,6))); ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,mix_stap[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mix_stap: ") + e.what());
        }

        if (!(context__.contains_r("one_over_lambda")))
            throw std::runtime_error("variable one_over_lambda missing");
        vals_r__ = context__.vals_r("one_over_lambda");
        pos__ = 0U;
        validate_non_negative_index("one_over_lambda", "logical_eq(prior_dist,6)", logical_eq(prior_dist,6));
        context__.validate_dims("initialization", "one_over_lambda", "double", context__.to_vec(logical_eq(prior_dist,6)));
        std::vector<double> one_over_lambda(logical_eq(prior_dist,6),double(0));
        for (int i0__ = 0U; i0__ < logical_eq(prior_dist,6); ++i0__)
            one_over_lambda[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(prior_dist,6); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,one_over_lambda[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable one_over_lambda: ") + e.what());
        }

        if (!(context__.contains_r("one_over_lambda_stap")))
            throw std::runtime_error("variable one_over_lambda_stap missing");
        vals_r__ = context__.vals_r("one_over_lambda_stap");
        pos__ = 0U;
        validate_non_negative_index("one_over_lambda_stap", "logical_eq(prior_dist_for_stap,6)", logical_eq(prior_dist_for_stap,6));
        context__.validate_dims("initialization", "one_over_lambda_stap", "double", context__.to_vec(logical_eq(prior_dist_for_stap,6)));
        std::vector<double> one_over_lambda_stap(logical_eq(prior_dist_for_stap,6),double(0));
        for (int i0__ = 0U; i0__ < logical_eq(prior_dist_for_stap,6); ++i0__)
            one_over_lambda_stap[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < logical_eq(prior_dist_for_stap,6); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,one_over_lambda_stap[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable one_over_lambda_stap: ") + e.what());
        }

        if (!(context__.contains_r("theta_s")))
            throw std::runtime_error("variable theta_s missing");
        vals_r__ = context__.vals_r("theta_s");
        pos__ = 0U;
        validate_non_negative_index("theta_s", "(Q_s + Q_st)", (Q_s + Q_st));
        context__.validate_dims("initialization", "theta_s", "double", context__.to_vec((Q_s + Q_st)));
        std::vector<double> theta_s((Q_s + Q_st),double(0));
        for (int i0__ = 0U; i0__ < (Q_s + Q_st); ++i0__)
            theta_s[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (Q_s + Q_st); ++i0__)
            try {
            writer__.scalar_lub_unconstrain(0,max_distance,theta_s[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta_s: ") + e.what());
        }

        if (!(context__.contains_r("theta_t")))
            throw std::runtime_error("variable theta_t missing");
        vals_r__ = context__.vals_r("theta_t");
        pos__ = 0U;
        validate_non_negative_index("theta_t", "(Q_t + Q_st)", (Q_t + Q_st));
        context__.validate_dims("initialization", "theta_t", "double", context__.to_vec((Q_t + Q_st)));
        std::vector<double> theta_t((Q_t + Q_st),double(0));
        for (int i0__ = 0U; i0__ < (Q_t + Q_st); ++i0__)
            theta_t[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (Q_t + Q_st); ++i0__)
            try {
            writer__.scalar_lub_unconstrain(0,max_time,theta_t[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta_t: ") + e.what());
        }

        if (!(context__.contains_r("z_b")))
            throw std::runtime_error("variable z_b missing");
        vals_r__ = context__.vals_r("z_b");
        pos__ = 0U;
        validate_non_negative_index("z_b", "q", q);
        context__.validate_dims("initialization", "z_b", "vector_d", context__.to_vec(q));
        vector_d z_b(static_cast<Eigen::VectorXd::Index>(q));
        for (int j1__ = 0U; j1__ < q; ++j1__)
            z_b(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_b);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_b: ") + e.what());
        }

        if (!(context__.contains_r("z_T")))
            throw std::runtime_error("variable z_T missing");
        vals_r__ = context__.vals_r("z_T");
        pos__ = 0U;
        validate_non_negative_index("z_T", "len_z_T", len_z_T);
        context__.validate_dims("initialization", "z_T", "vector_d", context__.to_vec(len_z_T));
        vector_d z_T(static_cast<Eigen::VectorXd::Index>(len_z_T));
        for (int j1__ = 0U; j1__ < len_z_T; ++j1__)
            z_T(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_T);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_T: ") + e.what());
        }

        if (!(context__.contains_r("rho")))
            throw std::runtime_error("variable rho missing");
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        validate_non_negative_index("rho", "len_rho", len_rho);
        context__.validate_dims("initialization", "rho", "vector_d", context__.to_vec(len_rho));
        vector_d rho(static_cast<Eigen::VectorXd::Index>(len_rho));
        for (int j1__ = 0U; j1__ < len_rho; ++j1__)
            rho(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,1,rho);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rho: ") + e.what());
        }

        if (!(context__.contains_r("zeta")))
            throw std::runtime_error("variable zeta missing");
        vals_r__ = context__.vals_r("zeta");
        pos__ = 0U;
        validate_non_negative_index("zeta", "len_concentration", len_concentration);
        context__.validate_dims("initialization", "zeta", "vector_d", context__.to_vec(len_concentration));
        vector_d zeta(static_cast<Eigen::VectorXd::Index>(len_concentration));
        for (int j1__ = 0U; j1__ < len_concentration; ++j1__)
            zeta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,zeta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable zeta: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        validate_non_negative_index("tau", "t", t);
        context__.validate_dims("initialization", "tau", "vector_d", context__.to_vec(t));
        vector_d tau(static_cast<Eigen::VectorXd::Index>(t));
        for (int j1__ = 0U; j1__ < t; ++j1__)
            tau(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            vector<local_scalar_t__> gamma;
            size_t dim_gamma_0__ = has_intercept;
            gamma.reserve(dim_gamma_0__);
            for (size_t k_0__ = 0; k_0__ < dim_gamma_0__; ++k_0__) {
                if (jacobian__)
                    gamma.push_back(in__.scalar_ub_constrain((logical_eq(link,4) ? 0.0 : stan::math::positive_infinity() ),lp__));
                else
                    gamma.push_back(in__.scalar_ub_constrain((logical_eq(link,4) ? 0.0 : stan::math::positive_infinity() )));
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  z_delta;
            (void) z_delta;  // dummy to suppress unused var warning
            if (jacobian__)
                z_delta = in__.vector_constrain((logical_eq(prior_dist,7) ? sum(num_normals) : K ),lp__);
            else
                z_delta = in__.vector_constrain((logical_eq(prior_dist,7) ? sum(num_normals) : K ));

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > mix;
            size_t dim_mix_0__ = (primitive_value(logical_eq(prior_dist,5)) || primitive_value(logical_eq(prior_dist,6)));
            mix.reserve(dim_mix_0__);
            for (size_t k_0__ = 0; k_0__ < dim_mix_0__; ++k_0__) {
                if (jacobian__)
                    mix.push_back(in__.vector_lb_constrain(0,K,lp__));
                else
                    mix.push_back(in__.vector_lb_constrain(0,K));
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  z_beta;
            (void) z_beta;  // dummy to suppress unused var warning
            if (jacobian__)
                z_beta = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_stap,7) ? sum(num_normals) : Q ),lp__);
            else
                z_beta = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_stap,7) ? sum(num_normals) : Q ));

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > mix_stap;
            size_t dim_mix_stap_0__ = (primitive_value(logical_eq(prior_dist_for_stap,5)) || primitive_value(logical_eq(prior_dist_for_stap,6)));
            mix_stap.reserve(dim_mix_stap_0__);
            for (size_t k_0__ = 0; k_0__ < dim_mix_stap_0__; ++k_0__) {
                if (jacobian__)
                    mix_stap.push_back(in__.vector_lb_constrain(0,Q,lp__));
                else
                    mix_stap.push_back(in__.vector_lb_constrain(0,Q));
            }

            vector<local_scalar_t__> one_over_lambda;
            size_t dim_one_over_lambda_0__ = logical_eq(prior_dist,6);
            one_over_lambda.reserve(dim_one_over_lambda_0__);
            for (size_t k_0__ = 0; k_0__ < dim_one_over_lambda_0__; ++k_0__) {
                if (jacobian__)
                    one_over_lambda.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    one_over_lambda.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> one_over_lambda_stap;
            size_t dim_one_over_lambda_stap_0__ = logical_eq(prior_dist_for_stap,6);
            one_over_lambda_stap.reserve(dim_one_over_lambda_stap_0__);
            for (size_t k_0__ = 0; k_0__ < dim_one_over_lambda_stap_0__; ++k_0__) {
                if (jacobian__)
                    one_over_lambda_stap.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    one_over_lambda_stap.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> theta_s;
            size_t dim_theta_s_0__ = (Q_s + Q_st);
            theta_s.reserve(dim_theta_s_0__);
            for (size_t k_0__ = 0; k_0__ < dim_theta_s_0__; ++k_0__) {
                if (jacobian__)
                    theta_s.push_back(in__.scalar_lub_constrain(0,max_distance,lp__));
                else
                    theta_s.push_back(in__.scalar_lub_constrain(0,max_distance));
            }

            vector<local_scalar_t__> theta_t;
            size_t dim_theta_t_0__ = (Q_t + Q_st);
            theta_t.reserve(dim_theta_t_0__);
            for (size_t k_0__ = 0; k_0__ < dim_theta_t_0__; ++k_0__) {
                if (jacobian__)
                    theta_t.push_back(in__.scalar_lub_constrain(0,max_time,lp__));
                else
                    theta_t.push_back(in__.scalar_lub_constrain(0,max_time));
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  z_b;
            (void) z_b;  // dummy to suppress unused var warning
            if (jacobian__)
                z_b = in__.vector_constrain(q,lp__);
            else
                z_b = in__.vector_constrain(q);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  z_T;
            (void) z_T;  // dummy to suppress unused var warning
            if (jacobian__)
                z_T = in__.vector_constrain(len_z_T,lp__);
            else
                z_T = in__.vector_constrain(len_z_T);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  rho;
            (void) rho;  // dummy to suppress unused var warning
            if (jacobian__)
                rho = in__.vector_lub_constrain(0,1,len_rho,lp__);
            else
                rho = in__.vector_lub_constrain(0,1,len_rho);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  zeta;
            (void) zeta;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta = in__.vector_lb_constrain(0,len_concentration,lp__);
            else
                zeta = in__.vector_lb_constrain(0,len_concentration);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.vector_lb_constrain(0,t,lp__);
            else
                tau = in__.vector_lb_constrain(0,t);


            // transformed parameters
            current_statement_begin__ = 622;
            validate_non_negative_index("delta", "K", K);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  delta(static_cast<Eigen::VectorXd::Index>(K));
            (void) delta;  // dummy to suppress unused var warning

            stan::math::initialize(delta, DUMMY_VAR__);
            stan::math::fill(delta,DUMMY_VAR__);
            current_statement_begin__ = 623;
            validate_non_negative_index("beta", "Q", Q);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta(static_cast<Eigen::VectorXd::Index>(Q));
            (void) beta;  // dummy to suppress unused var warning

            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);
            current_statement_begin__ = 624;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "Q", Q);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  X(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(Q));
            (void) X;  // dummy to suppress unused var warning

            stan::math::initialize(X, DUMMY_VAR__);
            stan::math::fill(X,DUMMY_VAR__);
            current_statement_begin__ = 625;
            validate_non_negative_index("X_tilde", "N", N);
            validate_non_negative_index("X_tilde", "Q", Q);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  X_tilde(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(Q));
            (void) X_tilde;  // dummy to suppress unused var warning

            stan::math::initialize(X_tilde, DUMMY_VAR__);
            stan::math::fill(X_tilde,DUMMY_VAR__);
            current_statement_begin__ = 626;
            validate_non_negative_index("b", "q", q);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b(static_cast<Eigen::VectorXd::Index>(q));
            (void) b;  // dummy to suppress unused var warning

            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b,DUMMY_VAR__);
            current_statement_begin__ = 627;
            validate_non_negative_index("theta_L", "len_theta_L", len_theta_L);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  theta_L(static_cast<Eigen::VectorXd::Index>(len_theta_L));
            (void) theta_L;  // dummy to suppress unused var warning

            stan::math::initialize(theta_L, DUMMY_VAR__);
            stan::math::fill(theta_L,DUMMY_VAR__);


            {
            current_statement_begin__ = 631;
            int cnt_s(0);
            (void) cnt_s;  // dummy to suppress unused var warning

            stan::math::fill(cnt_s, std::numeric_limits<int>::min());
            stan::math::assign(cnt_s,1);
            current_statement_begin__ = 632;
            int cnt_t(0);
            (void) cnt_t;  // dummy to suppress unused var warning

            stan::math::fill(cnt_t, std::numeric_limits<int>::min());
            stan::math::assign(cnt_t,1);


            current_statement_begin__ = 633;
            for (int q_ix = 1; q_ix <= Q; ++q_ix) {

                current_statement_begin__ = 634;
                for (int n = 1; n <= N; ++n) {

                    current_statement_begin__ = 635;
                    if (as_bool(logical_eq(get_base1(stap_code,q_ix,"stap_code",1),0))) {
                        current_statement_begin__ = 636;
                        stan::model::assign(X, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(q_ix), stan::model::nil_index_list())), 
                                    assign_exposure(get_base1(log_ar,q_ix,"log_ar",1),get_base1(get_base1(weight_mat,q_ix,"weight_mat",1),1,"weight_mat",2),u_s,get_base1(dists_crs,cnt_s,"dists_crs",1),get_base1(theta_s,cnt_s,"theta_s",1),q_ix,n, pstream__), 
                                    "assigning variable X");
                    } else if (as_bool(logical_eq(get_base1(stap_code,q_ix,"stap_code",1),1))) {
                        current_statement_begin__ = 638;
                        stan::model::assign(X, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(q_ix), stan::model::nil_index_list())), 
                                    assign_exposure(get_base1(log_ar,q_ix,"log_ar",1),get_base1(get_base1(weight_mat,q_ix,"weight_mat",1),2,"weight_mat",2),u_t,get_base1(times_crs,cnt_t,"times_crs",1),get_base1(theta_t,cnt_t,"theta_t",1),q_ix,n, pstream__), 
                                    "assigning variable X");
                    } else {
                        current_statement_begin__ = 640;
                        stan::model::assign(X, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(q_ix), stan::model::nil_index_list())), 
                                    assign_st_exposure(get_base1(log_ar,q_ix,"log_ar",1),get_base1(get_base1(weight_mat,q_ix,"weight_mat",1),1,"weight_mat",2),get_base1(get_base1(weight_mat,q_ix,"weight_mat",1),2,"weight_mat",2),u_s,u_t,get_base1(dists_crs,cnt_s,"dists_crs",1),get_base1(times_crs,cnt_t,"times_crs",1),get_base1(theta_s,cnt_s,"theta_s",1),get_base1(theta_t,cnt_t,"theta_t",1),q_ix,n, pstream__), 
                                    "assigning variable X");
                    }
                }
                current_statement_begin__ = 642;
                if (as_bool((primitive_value(logical_eq(get_base1(stap_code,q_ix,"stap_code",1),0)) || primitive_value(logical_eq(get_base1(stap_code,q_ix,"stap_code",1),2))))) {
                    current_statement_begin__ = 643;
                    stan::math::assign(cnt_s, stan::model::deep_copy((cnt_s + 1)));
                }
                current_statement_begin__ = 644;
                if (as_bool((primitive_value(logical_eq(get_base1(stap_code,q_ix,"stap_code",1),1)) || primitive_value(logical_eq(get_base1(stap_code,q_ix,"stap_code",1),2))))) {
                    current_statement_begin__ = 645;
                    stan::math::assign(cnt_t, stan::model::deep_copy((cnt_t + 1)));
                }
            }
            }
            current_statement_begin__ = 649;
            stan::math::assign(X_tilde, centerscale(X, pstream__));
            current_statement_begin__ = 652;
            if (as_bool(logical_eq(prior_dist,0))) {
                current_statement_begin__ = 652;
                stan::math::assign(delta, z_delta);
            } else if (as_bool(logical_eq(prior_dist,1))) {
                current_statement_begin__ = 653;
                stan::math::assign(delta, add(elt_multiply(z_delta,prior_scale),prior_mean));
            } else if (as_bool(logical_eq(prior_dist,2))) {

                current_statement_begin__ = 655;
                for (int k = 1; k <= K; ++k) {

                    current_statement_begin__ = 656;
                    stan::model::assign(delta, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                ((CFt(get_base1(z_delta,k,"z_delta",1),get_base1(prior_df,k,"prior_df",1), pstream__) * get_base1(prior_scale,k,"prior_scale",1)) + get_base1(prior_mean,k,"prior_mean",1)), 
                                "assigning variable delta");
                }
            } else if (as_bool(logical_eq(prior_dist,5))) {
                current_statement_begin__ = 660;
                stan::math::assign(delta, add(prior_mean,elt_multiply(elt_multiply(prior_scale,stan::math::sqrt(multiply(2,get_base1(mix,1,"mix",1)))),z_delta)));
            } else if (as_bool(logical_eq(prior_dist,6))) {
                current_statement_begin__ = 662;
                stan::math::assign(delta, add(prior_mean,elt_multiply(elt_multiply(multiply(get_base1(one_over_lambda,1,"one_over_lambda",1),prior_scale),stan::math::sqrt(multiply(2,get_base1(mix,1,"mix",1)))),z_delta)));
            } else if (as_bool(logical_eq(prior_dist,7))) {
                {
                current_statement_begin__ = 664;
                int z_pos(0);
                (void) z_pos;  // dummy to suppress unused var warning

                stan::math::fill(z_pos, std::numeric_limits<int>::min());
                stan::math::assign(z_pos,1);


                current_statement_begin__ = 665;
                for (int k = 1; k <= K; ++k) {

                    current_statement_begin__ = 666;
                    stan::model::assign(delta, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                get_base1(z_delta,z_pos,"z_delta",1), 
                                "assigning variable delta");
                    current_statement_begin__ = 667;
                    stan::math::assign(z_pos, stan::model::deep_copy((z_pos + 1)));
                    current_statement_begin__ = 668;
                    for (int n = 2; n <= get_base1(num_normals,k,"num_normals",1); ++n) {

                        current_statement_begin__ = 669;
                        stan::model::assign(delta, 
                                    stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                    stan::model::deep_copy((get_base1(delta,k,"delta",1) * get_base1(z_delta,z_pos,"z_delta",1))), 
                                    "assigning variable delta");
                        current_statement_begin__ = 670;
                        stan::math::assign(z_pos, stan::model::deep_copy((z_pos + 1)));
                    }
                    current_statement_begin__ = 672;
                    stan::model::assign(delta, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                stan::model::deep_copy(((get_base1(delta,k,"delta",1) * pow(get_base1(prior_scale,k,"prior_scale",1),get_base1(num_normals,k,"num_normals",1))) + get_base1(prior_mean,k,"prior_mean",1))), 
                                "assigning variable delta");
                }
                }
            }
            current_statement_begin__ = 677;
            if (as_bool(logical_eq(prior_dist_for_stap,0))) {
                current_statement_begin__ = 677;
                stan::math::assign(beta, z_beta);
            } else if (as_bool(logical_eq(prior_dist_for_stap,1))) {
                current_statement_begin__ = 678;
                stan::math::assign(beta, add(elt_multiply(z_beta,prior_scale_for_stap),prior_mean_for_stap));
            } else if (as_bool(logical_eq(prior_dist_for_stap,2))) {
                current_statement_begin__ = 679;
                for (int q_ix = 1; q_ix <= Q; ++q_ix) {

                    current_statement_begin__ = 680;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(q_ix), stan::model::nil_index_list()), 
                                ((CFt(get_base1(z_beta,q_ix,"z_beta",1),get_base1(prior_df_for_stap,q_ix,"prior_df_for_stap",1), pstream__) * get_base1(prior_scale_for_stap,q_ix,"prior_scale_for_stap",1)) + get_base1(prior_mean_for_stap,q_ix,"prior_mean_for_stap",1)), 
                                "assigning variable beta");
                }
            } else if (as_bool(logical_eq(prior_dist_for_stap,5))) {
                current_statement_begin__ = 683;
                stan::math::assign(beta, add(prior_mean_for_stap,elt_multiply(elt_multiply(prior_scale_for_stap,stan::math::sqrt(multiply(2,get_base1(mix,1,"mix",1)))),z_beta)));
            } else if (as_bool(logical_eq(prior_dist_for_stap,6))) {
                current_statement_begin__ = 685;
                stan::math::assign(beta, add(prior_mean_for_stap,elt_multiply(elt_multiply(multiply(get_base1(one_over_lambda,1,"one_over_lambda",1),prior_scale_for_stap),stan::math::sqrt(multiply(2,get_base1(mix,1,"mix",1)))),z_beta)));
            } else if (as_bool(logical_eq(prior_dist_for_stap,7))) {
                {
                current_statement_begin__ = 687;
                int z_pos(0);
                (void) z_pos;  // dummy to suppress unused var warning

                stan::math::fill(z_pos, std::numeric_limits<int>::min());
                stan::math::assign(z_pos,1);


                current_statement_begin__ = 688;
                for (int q_ix = 1; q_ix <= Q; ++q_ix) {

                    current_statement_begin__ = 689;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(q_ix), stan::model::nil_index_list()), 
                                get_base1(z_beta,z_pos,"z_beta",1), 
                                "assigning variable beta");
                    current_statement_begin__ = 690;
                    stan::math::assign(z_pos, stan::model::deep_copy((z_pos + 1)));
                    current_statement_begin__ = 691;
                    for (int n = 2; n <= get_base1(num_normals_for_stap,q_ix,"num_normals_for_stap",1); ++n) {

                        current_statement_begin__ = 692;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(q_ix), stan::model::nil_index_list()), 
                                    stan::model::deep_copy((get_base1(beta,q_ix,"beta",1) * get_base1(z_delta,z_pos,"z_delta",1))), 
                                    "assigning variable beta");
                        current_statement_begin__ = 693;
                        stan::math::assign(z_pos, stan::model::deep_copy((z_pos + 1)));
                    }
                    current_statement_begin__ = 695;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(q_ix), stan::model::nil_index_list()), 
                                ((get_base1(delta,q_ix,"delta",1) * pow(get_base1(prior_scale_for_stap,q_ix,"prior_scale_for_stap",1),get_base1(num_normals_for_stap,q_ix,"num_normals_for_stap",1))) + get_base1(prior_mean_for_stap,q_ix,"prior_mean_for_stap",1)), 
                                "assigning variable beta");
                }
                }
            }
            current_statement_begin__ = 698;
            if (as_bool(logical_gt(t,0))) {

                current_statement_begin__ = 699;
                if (as_bool(logical_eq(special_case,1))) {
                    {
                    current_statement_begin__ = 700;
                    int start(0);
                    (void) start;  // dummy to suppress unused var warning

                    stan::math::fill(start, std::numeric_limits<int>::min());
                    stan::math::assign(start,1);


                    current_statement_begin__ = 701;
                    stan::math::assign(theta_L, elt_multiply(scale,tau));
                    current_statement_begin__ = 702;
                    if (as_bool(logical_eq(t,1))) {
                        current_statement_begin__ = 702;
                        stan::math::assign(b, multiply(get_base1(theta_L,1,"theta_L",1),z_b));
                    } else {
                        current_statement_begin__ = 703;
                        for (int i = 1; i <= t; ++i) {
                            {
                            current_statement_begin__ = 704;
                            int end(0);
                            (void) end;  // dummy to suppress unused var warning

                            stan::math::fill(end, std::numeric_limits<int>::min());
                            stan::math::assign(end,((start + get_base1(l,i,"l",1)) - 1));


                            current_statement_begin__ = 705;
                            stan::model::assign(b, 
                                        stan::model::cons_list(stan::model::index_min_max(start, end), stan::model::nil_index_list()), 
                                        multiply(get_base1(theta_L,i,"theta_L",1),stan::model::rvalue(z_b, stan::model::cons_list(stan::model::index_min_max(start, end), stan::model::nil_index_list()), "z_b")), 
                                        "assigning variable b");
                            current_statement_begin__ = 706;
                            stan::math::assign(start, (end + 1));
                            }
                        }
                    }
                    }
                } else {

                    current_statement_begin__ = 709;
                    stan::math::assign(theta_L, make_theta_L(len_theta_L,p,1.0,tau,scale,zeta,rho,z_T, pstream__));
                    current_statement_begin__ = 710;
                    stan::math::assign(b, make_b(z_b,theta_L,p,l, pstream__));
                }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < K; ++i0__) {
                if (stan::math::is_uninitialized(delta(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: delta" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < Q; ++i0__) {
                if (stan::math::is_uninitialized(beta(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < N; ++i0__) {
                for (int i1__ = 0; i1__ < Q; ++i1__) {
                    if (stan::math::is_uninitialized(X(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: X" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < N; ++i0__) {
                for (int i1__ = 0; i1__ < Q; ++i1__) {
                    if (stan::math::is_uninitialized(X_tilde(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: X_tilde" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < q; ++i0__) {
                if (stan::math::is_uninitialized(b(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: b" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < len_theta_L; ++i0__) {
                if (stan::math::is_uninitialized(theta_L(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_L" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 622;
            current_statement_begin__ = 623;
            current_statement_begin__ = 624;
            current_statement_begin__ = 625;
            current_statement_begin__ = 626;
            current_statement_begin__ = 627;

            // model body
            {
            current_statement_begin__ = 716;
            validate_non_negative_index("eta", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  eta(static_cast<Eigen::VectorXd::Index>(N));
            (void) eta;  // dummy to suppress unused var warning

            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta,DUMMY_VAR__);


            current_statement_begin__ = 717;
            stan::math::assign(eta, add(multiply(Z,delta),multiply(X_tilde,beta)));
            current_statement_begin__ = 718;
            if (as_bool(logical_eq(has_offset,1))) {
                current_statement_begin__ = 718;
                stan::math::assign(eta, stan::model::deep_copy(add(eta,offset)));
            }
            current_statement_begin__ = 719;
            if (as_bool(logical_gt(t,0))) {

                current_statement_begin__ = 720;
                if (as_bool(special_case)) {
                    current_statement_begin__ = 720;
                    for (int i = 1; i <= t; ++i) {
                        current_statement_begin__ = 720;
                        stan::math::assign(eta, stan::model::deep_copy(add(eta,stan::model::rvalue(b, stan::model::cons_list(stan::model::index_multi(get_base1(V,i,"V",1)), stan::model::nil_index_list()), "b"))));
                    }
                } else {
                    current_statement_begin__ = 721;
                    stan::math::assign(eta, stan::model::deep_copy(add(eta,csr_matrix_times_vector(N,q,w,v,u,b))));
                }
            }
            current_statement_begin__ = 723;
            if (as_bool(logical_eq(has_intercept,1))) {

                current_statement_begin__ = 724;
                if (as_bool(logical_neq(link,4))) {
                    current_statement_begin__ = 724;
                    stan::math::assign(eta, stan::model::deep_copy(add(eta,get_base1(gamma,1,"gamma",1))));
                } else {
                    current_statement_begin__ = 725;
                    stan::math::assign(eta, stan::model::deep_copy(subtract(add(get_base1(gamma,1,"gamma",1),eta),max(eta))));
                }
            } else {

                current_statement_begin__ = 731;
                stan::math::assign(eta, stan::model::deep_copy(add(add(eta,dot_product(zbar,delta)),dot_product(colmeans(X, pstream__),elt_divide(beta,colsds(X, pstream__))))));
            }
            current_statement_begin__ = 734;
            if (as_bool(logical_eq(has_weights,0))) {
                {
                current_statement_begin__ = 735;
                local_scalar_t__ dummy;
                (void) dummy;  // dummy to suppress unused var warning

                stan::math::initialize(dummy, DUMMY_VAR__);
                stan::math::fill(dummy,DUMMY_VAR__);


                current_statement_begin__ = 736;
                stan::math::assign(dummy, ll_binom_lp(y,trials,eta,link, lp__, lp_accum__, pstream__));
                }
            } else if (as_bool(logical_eq(has_weights,1))) {
                current_statement_begin__ = 739;
                lp_accum__.add(dot_product(weights,pw_binom(y,trials,eta,link, pstream__)));
            }
            current_statement_begin__ = 741;
            if (as_bool(logical_eq(prior_dist,1))) {
                current_statement_begin__ = 741;
                lp_accum__.add(normal_log(z_delta,0,1));
            } else if (as_bool(logical_eq(prior_dist,2))) {
                current_statement_begin__ = 742;
                lp_accum__.add(normal_log(z_delta,0,1));
            } else if (as_bool(logical_eq(prior_dist,5))) {

                current_statement_begin__ = 744;
                lp_accum__.add(normal_log(z_delta,0,1));
                current_statement_begin__ = 745;
                lp_accum__.add(exponential_log(get_base1(mix,1,"mix",1),1));
            } else if (as_bool(logical_eq(prior_dist,6))) {

                current_statement_begin__ = 748;
                lp_accum__.add(normal_log(z_delta,0,1));
                current_statement_begin__ = 749;
                lp_accum__.add(exponential_log(get_base1(mix,1,"mix",1),1));
                current_statement_begin__ = 750;
                lp_accum__.add(chi_square_log(get_base1(one_over_lambda,1,"one_over_lambda",1),get_base1(prior_df,1,"prior_df",1)));
            } else if (as_bool(logical_eq(prior_dist,7))) {

                current_statement_begin__ = 753;
                lp_accum__.add(normal_log(z_delta,0,1));
            }
            current_statement_begin__ = 758;
            if (as_bool(logical_eq(has_intercept,1))) {

                current_statement_begin__ = 759;
                if (as_bool(logical_eq(prior_dist_for_intercept,1))) {
                    current_statement_begin__ = 760;
                    lp_accum__.add(normal_log(gamma,prior_mean_for_intercept,prior_scale_for_intercept));
                } else if (as_bool(logical_eq(prior_dist_for_intercept,2))) {
                    current_statement_begin__ = 762;
                    lp_accum__.add(student_t_log(gamma,prior_df_for_intercept,prior_mean_for_intercept,prior_scale_for_intercept));
                }
            }
            current_statement_begin__ = 768;
            if (as_bool(logical_eq(prior_dist_for_stap,1))) {
                current_statement_begin__ = 768;
                lp_accum__.add(normal_log(z_beta,0,1));
            } else if (as_bool(logical_eq(prior_dist_for_stap,2))) {
                current_statement_begin__ = 769;
                lp_accum__.add(normal_log(z_beta,0,1));
            } else if (as_bool(logical_eq(prior_dist_for_stap,5))) {

                current_statement_begin__ = 771;
                lp_accum__.add(normal_log(z_beta,0,1));
                current_statement_begin__ = 772;
                lp_accum__.add(exponential_log(get_base1(mix_stap,1,"mix_stap",1),1));
            } else if (as_bool(logical_eq(prior_dist_for_stap,6))) {

                current_statement_begin__ = 775;
                lp_accum__.add(normal_log(z_beta,0,1));
                current_statement_begin__ = 776;
                lp_accum__.add(exponential_log(get_base1(mix_stap,1,"mix_stap",1),1));
                current_statement_begin__ = 777;
                lp_accum__.add(chi_square_log(get_base1(one_over_lambda_stap,1,"one_over_lambda_stap",1),get_base1(prior_df,1,"prior_df",1)));
            } else if (as_bool(logical_eq(prior_dist_for_stap,7))) {

                current_statement_begin__ = 780;
                lp_accum__.add(normal_log(z_beta,0,1));
            }
            {
            current_statement_begin__ = 786;
            int cnt_s(0);
            (void) cnt_s;  // dummy to suppress unused var warning

            stan::math::fill(cnt_s, std::numeric_limits<int>::min());
            stan::math::assign(cnt_s,1);
            current_statement_begin__ = 787;
            int cnt_t(0);
            (void) cnt_t;  // dummy to suppress unused var warning

            stan::math::fill(cnt_t, std::numeric_limits<int>::min());
            stan::math::assign(cnt_t,1);


            current_statement_begin__ = 788;
            for (int q_ix = 1; q_ix <= Q; ++q_ix) {

                current_statement_begin__ = 789;
                if (as_bool((primitive_value(logical_eq(get_base1(stap_code,q_ix,"stap_code",1),0)) || primitive_value(logical_eq(get_base1(stap_code,q_ix,"stap_code",1),2))))) {

                    current_statement_begin__ = 790;
                    if (as_bool(logical_eq(get_base1(prior_dist_for_theta_s,cnt_s,"prior_dist_for_theta_s",1),1))) {
                        current_statement_begin__ = 791;
                        lp_accum__.add(normal_log(get_base1(theta_s,cnt_s,"theta_s",1),get_base1(prior_mean_for_theta_s,cnt_s,"prior_mean_for_theta_s",1),get_base1(prior_scale_for_theta_s,cnt_s,"prior_scale_for_theta_s",1)));
                    } else if (as_bool(logical_eq(get_base1(prior_dist_for_theta_s,cnt_s,"prior_dist_for_theta_s",1),8))) {
                        current_statement_begin__ = 793;
                        lp_accum__.add(lognormal_log(get_base1(theta_s,cnt_s,"theta_s",1),get_base1(prior_mean_for_theta_s,cnt_s,"prior_mean_for_theta_s",1),get_base1(prior_scale_for_theta_s,cnt_s,"prior_scale_for_theta_s",1)));
                    }
                    current_statement_begin__ = 794;
                    stan::math::assign(cnt_s, stan::model::deep_copy((cnt_s + 1)));
                }
                current_statement_begin__ = 796;
                if (as_bool((primitive_value(logical_eq(get_base1(stap_code,q_ix,"stap_code",1),1)) || primitive_value(logical_eq(get_base1(stap_code,q_ix,"stap_code",1),2))))) {

                    current_statement_begin__ = 797;
                    if (as_bool(logical_eq(get_base1(prior_dist_for_theta_t,cnt_t,"prior_dist_for_theta_t",1),1))) {
                        current_statement_begin__ = 798;
                        lp_accum__.add(normal_log(get_base1(theta_t,cnt_t,"theta_t",1),get_base1(prior_mean_for_theta_t,cnt_t,"prior_mean_for_theta_t",1),get_base1(prior_scale_for_theta_t,cnt_t,"prior_scale_for_theta_t",1)));
                    }
                    current_statement_begin__ = 799;
                    if (as_bool(logical_eq(get_base1(prior_dist_for_theta_t,cnt_t,"prior_dist_for_theta_t",1),8))) {
                        current_statement_begin__ = 800;
                        lp_accum__.add(lognormal_log(get_base1(theta_t,cnt_t,"theta_t",1),get_base1(prior_mean_for_theta_t,cnt_t,"prior_mean_for_theta_t",1),get_base1(prior_scale_for_theta_t,cnt_t,"prior_scale_for_theta_t",1)));
                    }
                    current_statement_begin__ = 801;
                    stan::math::assign(cnt_t, stan::model::deep_copy((cnt_t + 1)));
                }
            }
            }
            current_statement_begin__ = 805;
            if (as_bool(logical_gt(t,0))) {
                current_statement_begin__ = 805;
                decov_lp(z_b,z_T,rho,zeta,tau,regularization,del,shape,t,p, lp__, lp_accum__, pstream__);
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("gamma");
        names__.push_back("z_delta");
        names__.push_back("mix");
        names__.push_back("z_beta");
        names__.push_back("mix_stap");
        names__.push_back("one_over_lambda");
        names__.push_back("one_over_lambda_stap");
        names__.push_back("theta_s");
        names__.push_back("theta_t");
        names__.push_back("z_b");
        names__.push_back("z_T");
        names__.push_back("rho");
        names__.push_back("zeta");
        names__.push_back("tau");
        names__.push_back("delta");
        names__.push_back("beta");
        names__.push_back("X");
        names__.push_back("X_tilde");
        names__.push_back("b");
        names__.push_back("theta_L");
        names__.push_back("alpha");
        names__.push_back("adj_beta");
        names__.push_back("mean_PPD");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(has_intercept);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(prior_dist,7) ? sum(num_normals) : K ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((primitive_value(logical_eq(prior_dist,5)) || primitive_value(logical_eq(prior_dist,6))));
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(prior_dist_for_stap,7) ? sum(num_normals) : Q ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((primitive_value(logical_eq(prior_dist_for_stap,5)) || primitive_value(logical_eq(prior_dist_for_stap,6))));
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(prior_dist,6));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(prior_dist_for_stap,6));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Q_s + Q_st));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Q_t + Q_st));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_z_T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_rho);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_concentration);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_theta_L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(has_intercept);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_stap_binomial_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> gamma;
        size_t dim_gamma_0__ = has_intercept;
        for (size_t k_0__ = 0; k_0__ < dim_gamma_0__; ++k_0__) {
            gamma.push_back(in__.scalar_ub_constrain((logical_eq(link,4) ? 0.0 : stan::math::positive_infinity() )));
        }
        vector_d z_delta = in__.vector_constrain((logical_eq(prior_dist,7) ? sum(num_normals) : K ));
        vector<vector_d> mix;
        size_t dim_mix_0__ = (primitive_value(logical_eq(prior_dist,5)) || primitive_value(logical_eq(prior_dist,6)));
        for (size_t k_0__ = 0; k_0__ < dim_mix_0__; ++k_0__) {
            mix.push_back(in__.vector_lb_constrain(0,K));
        }
        vector_d z_beta = in__.vector_lb_constrain(0,(logical_eq(prior_dist_for_stap,7) ? sum(num_normals) : Q ));
        vector<vector_d> mix_stap;
        size_t dim_mix_stap_0__ = (primitive_value(logical_eq(prior_dist_for_stap,5)) || primitive_value(logical_eq(prior_dist_for_stap,6)));
        for (size_t k_0__ = 0; k_0__ < dim_mix_stap_0__; ++k_0__) {
            mix_stap.push_back(in__.vector_lb_constrain(0,Q));
        }
        vector<double> one_over_lambda;
        size_t dim_one_over_lambda_0__ = logical_eq(prior_dist,6);
        for (size_t k_0__ = 0; k_0__ < dim_one_over_lambda_0__; ++k_0__) {
            one_over_lambda.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> one_over_lambda_stap;
        size_t dim_one_over_lambda_stap_0__ = logical_eq(prior_dist_for_stap,6);
        for (size_t k_0__ = 0; k_0__ < dim_one_over_lambda_stap_0__; ++k_0__) {
            one_over_lambda_stap.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> theta_s;
        size_t dim_theta_s_0__ = (Q_s + Q_st);
        for (size_t k_0__ = 0; k_0__ < dim_theta_s_0__; ++k_0__) {
            theta_s.push_back(in__.scalar_lub_constrain(0,max_distance));
        }
        vector<double> theta_t;
        size_t dim_theta_t_0__ = (Q_t + Q_st);
        for (size_t k_0__ = 0; k_0__ < dim_theta_t_0__; ++k_0__) {
            theta_t.push_back(in__.scalar_lub_constrain(0,max_time));
        }
        vector_d z_b = in__.vector_constrain(q);
        vector_d z_T = in__.vector_constrain(len_z_T);
        vector_d rho = in__.vector_lub_constrain(0,1,len_rho);
        vector_d zeta = in__.vector_lb_constrain(0,len_concentration);
        vector_d tau = in__.vector_lb_constrain(0,t);
            for (int k_0__ = 0; k_0__ < has_intercept; ++k_0__) {
            vars__.push_back(gamma[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (logical_eq(prior_dist,7) ? sum(num_normals) : K ); ++k_0__) {
            vars__.push_back(z_delta[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (primitive_value(logical_eq(prior_dist,5)) || primitive_value(logical_eq(prior_dist,6))); ++k_0__) {
                vars__.push_back(mix[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < (logical_eq(prior_dist_for_stap,7) ? sum(num_normals) : Q ); ++k_0__) {
            vars__.push_back(z_beta[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (primitive_value(logical_eq(prior_dist_for_stap,5)) || primitive_value(logical_eq(prior_dist_for_stap,6))); ++k_0__) {
                vars__.push_back(mix_stap[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < logical_eq(prior_dist,6); ++k_0__) {
            vars__.push_back(one_over_lambda[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < logical_eq(prior_dist_for_stap,6); ++k_0__) {
            vars__.push_back(one_over_lambda_stap[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (Q_s + Q_st); ++k_0__) {
            vars__.push_back(theta_s[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (Q_t + Q_st); ++k_0__) {
            vars__.push_back(theta_t[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < q; ++k_0__) {
            vars__.push_back(z_b[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < len_z_T; ++k_0__) {
            vars__.push_back(z_T[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < len_rho; ++k_0__) {
            vars__.push_back(rho[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < len_concentration; ++k_0__) {
            vars__.push_back(zeta[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < t; ++k_0__) {
            vars__.push_back(tau[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 622;
            validate_non_negative_index("delta", "K", K);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  delta(static_cast<Eigen::VectorXd::Index>(K));
            (void) delta;  // dummy to suppress unused var warning

            stan::math::initialize(delta, DUMMY_VAR__);
            stan::math::fill(delta,DUMMY_VAR__);
            current_statement_begin__ = 623;
            validate_non_negative_index("beta", "Q", Q);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta(static_cast<Eigen::VectorXd::Index>(Q));
            (void) beta;  // dummy to suppress unused var warning

            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);
            current_statement_begin__ = 624;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "Q", Q);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  X(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(Q));
            (void) X;  // dummy to suppress unused var warning

            stan::math::initialize(X, DUMMY_VAR__);
            stan::math::fill(X,DUMMY_VAR__);
            current_statement_begin__ = 625;
            validate_non_negative_index("X_tilde", "N", N);
            validate_non_negative_index("X_tilde", "Q", Q);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  X_tilde(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(Q));
            (void) X_tilde;  // dummy to suppress unused var warning

            stan::math::initialize(X_tilde, DUMMY_VAR__);
            stan::math::fill(X_tilde,DUMMY_VAR__);
            current_statement_begin__ = 626;
            validate_non_negative_index("b", "q", q);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b(static_cast<Eigen::VectorXd::Index>(q));
            (void) b;  // dummy to suppress unused var warning

            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b,DUMMY_VAR__);
            current_statement_begin__ = 627;
            validate_non_negative_index("theta_L", "len_theta_L", len_theta_L);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  theta_L(static_cast<Eigen::VectorXd::Index>(len_theta_L));
            (void) theta_L;  // dummy to suppress unused var warning

            stan::math::initialize(theta_L, DUMMY_VAR__);
            stan::math::fill(theta_L,DUMMY_VAR__);


            {
            current_statement_begin__ = 631;
            int cnt_s(0);
            (void) cnt_s;  // dummy to suppress unused var warning

            stan::math::fill(cnt_s, std::numeric_limits<int>::min());
            stan::math::assign(cnt_s,1);
            current_statement_begin__ = 632;
            int cnt_t(0);
            (void) cnt_t;  // dummy to suppress unused var warning

            stan::math::fill(cnt_t, std::numeric_limits<int>::min());
            stan::math::assign(cnt_t,1);


            current_statement_begin__ = 633;
            for (int q_ix = 1; q_ix <= Q; ++q_ix) {

                current_statement_begin__ = 634;
                for (int n = 1; n <= N; ++n) {

                    current_statement_begin__ = 635;
                    if (as_bool(logical_eq(get_base1(stap_code,q_ix,"stap_code",1),0))) {
                        current_statement_begin__ = 636;
                        stan::model::assign(X, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(q_ix), stan::model::nil_index_list())), 
                                    assign_exposure(get_base1(log_ar,q_ix,"log_ar",1),get_base1(get_base1(weight_mat,q_ix,"weight_mat",1),1,"weight_mat",2),u_s,get_base1(dists_crs,cnt_s,"dists_crs",1),get_base1(theta_s,cnt_s,"theta_s",1),q_ix,n, pstream__), 
                                    "assigning variable X");
                    } else if (as_bool(logical_eq(get_base1(stap_code,q_ix,"stap_code",1),1))) {
                        current_statement_begin__ = 638;
                        stan::model::assign(X, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(q_ix), stan::model::nil_index_list())), 
                                    assign_exposure(get_base1(log_ar,q_ix,"log_ar",1),get_base1(get_base1(weight_mat,q_ix,"weight_mat",1),2,"weight_mat",2),u_t,get_base1(times_crs,cnt_t,"times_crs",1),get_base1(theta_t,cnt_t,"theta_t",1),q_ix,n, pstream__), 
                                    "assigning variable X");
                    } else {
                        current_statement_begin__ = 640;
                        stan::model::assign(X, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(q_ix), stan::model::nil_index_list())), 
                                    assign_st_exposure(get_base1(log_ar,q_ix,"log_ar",1),get_base1(get_base1(weight_mat,q_ix,"weight_mat",1),1,"weight_mat",2),get_base1(get_base1(weight_mat,q_ix,"weight_mat",1),2,"weight_mat",2),u_s,u_t,get_base1(dists_crs,cnt_s,"dists_crs",1),get_base1(times_crs,cnt_t,"times_crs",1),get_base1(theta_s,cnt_s,"theta_s",1),get_base1(theta_t,cnt_t,"theta_t",1),q_ix,n, pstream__), 
                                    "assigning variable X");
                    }
                }
                current_statement_begin__ = 642;
                if (as_bool((primitive_value(logical_eq(get_base1(stap_code,q_ix,"stap_code",1),0)) || primitive_value(logical_eq(get_base1(stap_code,q_ix,"stap_code",1),2))))) {
                    current_statement_begin__ = 643;
                    stan::math::assign(cnt_s, stan::model::deep_copy((cnt_s + 1)));
                }
                current_statement_begin__ = 644;
                if (as_bool((primitive_value(logical_eq(get_base1(stap_code,q_ix,"stap_code",1),1)) || primitive_value(logical_eq(get_base1(stap_code,q_ix,"stap_code",1),2))))) {
                    current_statement_begin__ = 645;
                    stan::math::assign(cnt_t, stan::model::deep_copy((cnt_t + 1)));
                }
            }
            }
            current_statement_begin__ = 649;
            stan::math::assign(X_tilde, centerscale(X, pstream__));
            current_statement_begin__ = 652;
            if (as_bool(logical_eq(prior_dist,0))) {
                current_statement_begin__ = 652;
                stan::math::assign(delta, z_delta);
            } else if (as_bool(logical_eq(prior_dist,1))) {
                current_statement_begin__ = 653;
                stan::math::assign(delta, add(elt_multiply(z_delta,prior_scale),prior_mean));
            } else if (as_bool(logical_eq(prior_dist,2))) {

                current_statement_begin__ = 655;
                for (int k = 1; k <= K; ++k) {

                    current_statement_begin__ = 656;
                    stan::model::assign(delta, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                ((CFt(get_base1(z_delta,k,"z_delta",1),get_base1(prior_df,k,"prior_df",1), pstream__) * get_base1(prior_scale,k,"prior_scale",1)) + get_base1(prior_mean,k,"prior_mean",1)), 
                                "assigning variable delta");
                }
            } else if (as_bool(logical_eq(prior_dist,5))) {
                current_statement_begin__ = 660;
                stan::math::assign(delta, add(prior_mean,elt_multiply(elt_multiply(prior_scale,stan::math::sqrt(multiply(2,get_base1(mix,1,"mix",1)))),z_delta)));
            } else if (as_bool(logical_eq(prior_dist,6))) {
                current_statement_begin__ = 662;
                stan::math::assign(delta, add(prior_mean,elt_multiply(elt_multiply(multiply(get_base1(one_over_lambda,1,"one_over_lambda",1),prior_scale),stan::math::sqrt(multiply(2,get_base1(mix,1,"mix",1)))),z_delta)));
            } else if (as_bool(logical_eq(prior_dist,7))) {
                {
                current_statement_begin__ = 664;
                int z_pos(0);
                (void) z_pos;  // dummy to suppress unused var warning

                stan::math::fill(z_pos, std::numeric_limits<int>::min());
                stan::math::assign(z_pos,1);


                current_statement_begin__ = 665;
                for (int k = 1; k <= K; ++k) {

                    current_statement_begin__ = 666;
                    stan::model::assign(delta, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                get_base1(z_delta,z_pos,"z_delta",1), 
                                "assigning variable delta");
                    current_statement_begin__ = 667;
                    stan::math::assign(z_pos, stan::model::deep_copy((z_pos + 1)));
                    current_statement_begin__ = 668;
                    for (int n = 2; n <= get_base1(num_normals,k,"num_normals",1); ++n) {

                        current_statement_begin__ = 669;
                        stan::model::assign(delta, 
                                    stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                    stan::model::deep_copy((get_base1(delta,k,"delta",1) * get_base1(z_delta,z_pos,"z_delta",1))), 
                                    "assigning variable delta");
                        current_statement_begin__ = 670;
                        stan::math::assign(z_pos, stan::model::deep_copy((z_pos + 1)));
                    }
                    current_statement_begin__ = 672;
                    stan::model::assign(delta, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                stan::model::deep_copy(((get_base1(delta,k,"delta",1) * pow(get_base1(prior_scale,k,"prior_scale",1),get_base1(num_normals,k,"num_normals",1))) + get_base1(prior_mean,k,"prior_mean",1))), 
                                "assigning variable delta");
                }
                }
            }
            current_statement_begin__ = 677;
            if (as_bool(logical_eq(prior_dist_for_stap,0))) {
                current_statement_begin__ = 677;
                stan::math::assign(beta, z_beta);
            } else if (as_bool(logical_eq(prior_dist_for_stap,1))) {
                current_statement_begin__ = 678;
                stan::math::assign(beta, add(elt_multiply(z_beta,prior_scale_for_stap),prior_mean_for_stap));
            } else if (as_bool(logical_eq(prior_dist_for_stap,2))) {
                current_statement_begin__ = 679;
                for (int q_ix = 1; q_ix <= Q; ++q_ix) {

                    current_statement_begin__ = 680;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(q_ix), stan::model::nil_index_list()), 
                                ((CFt(get_base1(z_beta,q_ix,"z_beta",1),get_base1(prior_df_for_stap,q_ix,"prior_df_for_stap",1), pstream__) * get_base1(prior_scale_for_stap,q_ix,"prior_scale_for_stap",1)) + get_base1(prior_mean_for_stap,q_ix,"prior_mean_for_stap",1)), 
                                "assigning variable beta");
                }
            } else if (as_bool(logical_eq(prior_dist_for_stap,5))) {
                current_statement_begin__ = 683;
                stan::math::assign(beta, add(prior_mean_for_stap,elt_multiply(elt_multiply(prior_scale_for_stap,stan::math::sqrt(multiply(2,get_base1(mix,1,"mix",1)))),z_beta)));
            } else if (as_bool(logical_eq(prior_dist_for_stap,6))) {
                current_statement_begin__ = 685;
                stan::math::assign(beta, add(prior_mean_for_stap,elt_multiply(elt_multiply(multiply(get_base1(one_over_lambda,1,"one_over_lambda",1),prior_scale_for_stap),stan::math::sqrt(multiply(2,get_base1(mix,1,"mix",1)))),z_beta)));
            } else if (as_bool(logical_eq(prior_dist_for_stap,7))) {
                {
                current_statement_begin__ = 687;
                int z_pos(0);
                (void) z_pos;  // dummy to suppress unused var warning

                stan::math::fill(z_pos, std::numeric_limits<int>::min());
                stan::math::assign(z_pos,1);


                current_statement_begin__ = 688;
                for (int q_ix = 1; q_ix <= Q; ++q_ix) {

                    current_statement_begin__ = 689;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(q_ix), stan::model::nil_index_list()), 
                                get_base1(z_beta,z_pos,"z_beta",1), 
                                "assigning variable beta");
                    current_statement_begin__ = 690;
                    stan::math::assign(z_pos, stan::model::deep_copy((z_pos + 1)));
                    current_statement_begin__ = 691;
                    for (int n = 2; n <= get_base1(num_normals_for_stap,q_ix,"num_normals_for_stap",1); ++n) {

                        current_statement_begin__ = 692;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(q_ix), stan::model::nil_index_list()), 
                                    stan::model::deep_copy((get_base1(beta,q_ix,"beta",1) * get_base1(z_delta,z_pos,"z_delta",1))), 
                                    "assigning variable beta");
                        current_statement_begin__ = 693;
                        stan::math::assign(z_pos, stan::model::deep_copy((z_pos + 1)));
                    }
                    current_statement_begin__ = 695;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(q_ix), stan::model::nil_index_list()), 
                                ((get_base1(delta,q_ix,"delta",1) * pow(get_base1(prior_scale_for_stap,q_ix,"prior_scale_for_stap",1),get_base1(num_normals_for_stap,q_ix,"num_normals_for_stap",1))) + get_base1(prior_mean_for_stap,q_ix,"prior_mean_for_stap",1)), 
                                "assigning variable beta");
                }
                }
            }
            current_statement_begin__ = 698;
            if (as_bool(logical_gt(t,0))) {

                current_statement_begin__ = 699;
                if (as_bool(logical_eq(special_case,1))) {
                    {
                    current_statement_begin__ = 700;
                    int start(0);
                    (void) start;  // dummy to suppress unused var warning

                    stan::math::fill(start, std::numeric_limits<int>::min());
                    stan::math::assign(start,1);


                    current_statement_begin__ = 701;
                    stan::math::assign(theta_L, elt_multiply(scale,tau));
                    current_statement_begin__ = 702;
                    if (as_bool(logical_eq(t,1))) {
                        current_statement_begin__ = 702;
                        stan::math::assign(b, multiply(get_base1(theta_L,1,"theta_L",1),z_b));
                    } else {
                        current_statement_begin__ = 703;
                        for (int i = 1; i <= t; ++i) {
                            {
                            current_statement_begin__ = 704;
                            int end(0);
                            (void) end;  // dummy to suppress unused var warning

                            stan::math::fill(end, std::numeric_limits<int>::min());
                            stan::math::assign(end,((start + get_base1(l,i,"l",1)) - 1));


                            current_statement_begin__ = 705;
                            stan::model::assign(b, 
                                        stan::model::cons_list(stan::model::index_min_max(start, end), stan::model::nil_index_list()), 
                                        multiply(get_base1(theta_L,i,"theta_L",1),stan::model::rvalue(z_b, stan::model::cons_list(stan::model::index_min_max(start, end), stan::model::nil_index_list()), "z_b")), 
                                        "assigning variable b");
                            current_statement_begin__ = 706;
                            stan::math::assign(start, (end + 1));
                            }
                        }
                    }
                    }
                } else {

                    current_statement_begin__ = 709;
                    stan::math::assign(theta_L, make_theta_L(len_theta_L,p,1.0,tau,scale,zeta,rho,z_T, pstream__));
                    current_statement_begin__ = 710;
                    stan::math::assign(b, make_b(z_b,theta_L,p,l, pstream__));
                }
            }

            // validate transformed parameters
            current_statement_begin__ = 622;
            current_statement_begin__ = 623;
            current_statement_begin__ = 624;
            current_statement_begin__ = 625;
            current_statement_begin__ = 626;
            current_statement_begin__ = 627;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(delta[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(beta[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < N; ++k_0__) {
                vars__.push_back(X(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < N; ++k_0__) {
                vars__.push_back(X_tilde(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < q; ++k_0__) {
            vars__.push_back(b[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < len_theta_L; ++k_0__) {
            vars__.push_back(theta_L[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 809;
            validate_non_negative_index("alpha", "has_intercept", has_intercept);
            vector<local_scalar_t__> alpha(has_intercept);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha,DUMMY_VAR__);
            current_statement_begin__ = 810;
            validate_non_negative_index("adj_beta", "Q", Q);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  adj_beta(static_cast<Eigen::VectorXd::Index>(Q));
            (void) adj_beta;  // dummy to suppress unused var warning

            stan::math::initialize(adj_beta, DUMMY_VAR__);
            stan::math::fill(adj_beta,DUMMY_VAR__);
            current_statement_begin__ = 811;
            local_scalar_t__ mean_PPD;
            (void) mean_PPD;  // dummy to suppress unused var warning

            stan::math::initialize(mean_PPD, DUMMY_VAR__);
            stan::math::fill(mean_PPD,DUMMY_VAR__);
            stan::math::assign(mean_PPD,0);


            current_statement_begin__ = 812;
            if (as_bool(logical_eq(has_intercept,1))) {

                current_statement_begin__ = 813;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            ((get_base1(gamma,1,"gamma",1) - dot_product(zbar,delta)) - dot_product(colmeans(X, pstream__),elt_divide(beta,colsds(X, pstream__)))), 
                            "assigning variable alpha");
            }
            {
            current_statement_begin__ = 816;
            validate_non_negative_index("pi", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  pi(static_cast<Eigen::VectorXd::Index>(N));
            (void) pi;  // dummy to suppress unused var warning

            stan::math::initialize(pi, DUMMY_VAR__);
            stan::math::fill(pi,DUMMY_VAR__);
            current_statement_begin__ = 818;
            validate_non_negative_index("eta", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  eta(static_cast<Eigen::VectorXd::Index>(N));
            (void) eta;  // dummy to suppress unused var warning

            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta,DUMMY_VAR__);


            current_statement_begin__ = 819;
            stan::math::assign(eta, add(multiply(Z,delta),multiply(X_tilde,beta)));
            current_statement_begin__ = 820;
            if (as_bool(logical_eq(has_offset,1))) {
                current_statement_begin__ = 820;
                stan::math::assign(eta, stan::model::deep_copy(add(eta,offset)));
            }
            current_statement_begin__ = 821;
            if (as_bool(logical_gt(t,0))) {

                current_statement_begin__ = 822;
                if (as_bool(special_case)) {
                    current_statement_begin__ = 822;
                    for (int i = 1; i <= t; ++i) {
                        current_statement_begin__ = 822;
                        stan::math::assign(eta, stan::model::deep_copy(add(eta,stan::model::rvalue(b, stan::model::cons_list(stan::model::index_multi(get_base1(V,i,"V",1)), stan::model::nil_index_list()), "b"))));
                    }
                } else {
                    current_statement_begin__ = 823;
                    stan::math::assign(eta, stan::model::deep_copy(add(eta,csr_matrix_times_vector(N,q,w,v,u,b))));
                }
            }
            current_statement_begin__ = 825;
            if (as_bool(logical_eq(has_intercept,1))) {

                current_statement_begin__ = 826;
                if (as_bool(logical_neq(link,4))) {
                    current_statement_begin__ = 826;
                    stan::math::assign(eta, stan::model::deep_copy(add(eta,get_base1(gamma,1,"gamma",1))));
                } else {
                    {
                    current_statement_begin__ = 828;
                    local_scalar_t__ shift;
                    (void) shift;  // dummy to suppress unused var warning

                    stan::math::initialize(shift, DUMMY_VAR__);
                    stan::math::fill(shift,DUMMY_VAR__);
                    stan::math::assign(shift,max(eta));


                    current_statement_begin__ = 829;
                    stan::math::assign(eta, stan::model::deep_copy(subtract(add(get_base1(gamma,1,"gamma",1),eta),shift)));
                    current_statement_begin__ = 830;
                    stan::model::assign(alpha, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                stan::model::deep_copy((get_base1(alpha,1,"alpha",1) - shift)), 
                                "assigning variable alpha");
                    }
                }
            } else {

                current_statement_begin__ = 837;
                stan::math::assign(eta, stan::model::deep_copy(add(add(eta,dot_product(zbar,delta)),dot_product(colmeans(X, pstream__),elt_divide(beta,colsds(X, pstream__))))));
            }
            current_statement_begin__ = 840;
            stan::math::assign(pi, linkinv_binom(eta,link, pstream__));
            current_statement_begin__ = 841;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 841;
                stan::math::assign(mean_PPD, stan::model::deep_copy((mean_PPD + binomial_rng(get_base1(trials,n,"trials",1),get_base1(pi,n,"pi",1), base_rng__))));
            }
            current_statement_begin__ = 842;
            stan::math::assign(mean_PPD, stan::model::deep_copy((mean_PPD / N)));
            current_statement_begin__ = 843;
            stan::math::assign(adj_beta, elt_divide(beta,colsds(X, pstream__)));
            }

            // validate generated quantities
            current_statement_begin__ = 809;
            current_statement_begin__ = 810;
            current_statement_begin__ = 811;

            // write generated quantities
            for (int k_0__ = 0; k_0__ < has_intercept; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(adj_beta[k_0__]);
            }
        vars__.push_back(mean_PPD);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_stap_binomial";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist,7) ? sum(num_normals) : K ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_delta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(prior_dist,5)) || primitive_value(logical_eq(prior_dist,6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mix" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_stap,7) ? sum(num_normals) : Q ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(prior_dist_for_stap,5)) || primitive_value(logical_eq(prior_dist_for_stap,6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mix_stap" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(prior_dist,6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "one_over_lambda" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(prior_dist_for_stap,6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "one_over_lambda_stap" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (Q_s + Q_st); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_s" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (Q_t + Q_st); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_t" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_z_T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_rho; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_concentration; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= t; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "X" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "X_tilde" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= len_theta_L; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_L" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "adj_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_PPD";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist,7) ? sum(num_normals) : K ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_delta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(prior_dist,5)) || primitive_value(logical_eq(prior_dist,6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mix" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= (logical_eq(prior_dist_for_stap,7) ? sum(num_normals) : Q ); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (primitive_value(logical_eq(prior_dist_for_stap,5)) || primitive_value(logical_eq(prior_dist_for_stap,6))); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mix_stap" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(prior_dist,6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "one_over_lambda" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= logical_eq(prior_dist_for_stap,6); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "one_over_lambda_stap" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (Q_s + Q_st); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_s" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (Q_t + Q_st); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_t" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_z_T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_rho; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_concentration; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= t; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "X" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "X_tilde" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= len_theta_L; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_L" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "adj_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_PPD";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}

typedef model_stap_binomial_namespace::model_stap_binomial stan_model;


#endif
